from sdt.models import *from django.db import connectionimport datetimefrom django.db.models.aggregates import Maxfrom django.db.models.aggregates import Sumfrom django.contrib.auth.hashers import make_password,check_passwordfrom django.contrib import messagesimport timefrom django.utils.timezone import now, timedeltaimport copyimport randomimport qrcodedef user_reg(user_name,wx_name,club_id,remark, operator_id ,feedback,feedback_type): #注册新用户    try:        ucs_subs_user.objects.filter(inactive_time='2037-01-01').get(user_name=user_name)        return False    except:        try:            t_real_user = real_user(user_name=user_name)            t_real_user.save()  # 生成了USERID            tmp = real_user.objects.filter(user_name=user_name)            t_user_id=tmp.order_by('-active_time')[0].user_id            t_account = real_account(user_id=t_user_id)            t_account.save()  # 生成了account_ID            t_tmp = real_account.objects.filter(user_id=t_user_id)            # 生成了ACCOUNTID            t_account_id = t_tmp.order_by('-active_time')[0].account_id            #t_club_id = ucs_subs_club.objects.get(club_name=club_name).club_id  # 取club_id            t_ucs_subs_user = ucs_subs_user(user_id=t_user_id,                                            user_name=user_name,                                            wx_name=wx_name,                                            operator_id=operator_id                                            )            t_ucs_subs_user.save()  # 保存到usc_subs_user            t_ucs_account = ucs_account(user_id=t_user_id,                                        account_id=t_account_id,                                        club_id=club_id,                                        account_level=1)            t_ucs_account.save()  # account_id 写入            t_club = ucs_club_user(user_id=t_user_id,                                   club_id=club_id,                                   feedback=feedback,                                   feedback_type=feedback_type,                                   remark=remark)            t_club.save()            return True        except:            return Falsedef checkUserExist(user_name, club_id):    result=0    try:        user_id=ucs_subs_user.objects.filter(inactive_time='2037-01-01').get(user_name=user_name).user_id        tb_result=ucs_club_user.objects.filter(inactive_time='2037-01-01').filter(club_id=club_id).get(user_id=user_id)        result = 1 #俱乐部同名        return result    except Exception as e:        try:            tb_result=ucs_subs_user.objects.filter(inactive_time='2037-01-01').get(user_name=user_name)            result = 2  #联盟同名            return result        except :            return resultdef createUnionAcccount(club_id):    try:        account_id=ucs_union_account.objects.filter(inactive_time='2037-01-01').order_by('active_time')[0].account_id        account_id=account_id+1        t=ucs_union_account(account_id=account_id,                            club_id=club_id)        t.save()        return True    except:        account_id=10000        t=ucs_union_account(account_id=account_id,                            club_id=club_id)        t.save()        return Truedef user_old_reg(user_name, club_id,remark,feedback,feedback_type):    try:        user_id=ucs_subs_user.objects.filter(inactive_time='2037-01-01').get(user_name=user_name).user_id        t=ucs_club_user(user_id=user_id,                        club_id=club_id,                        feedback=feedback,                        feedback_type=feedback_type,                        remark=remark)        t.save()        #account_list=ucs_account.objects.filter(inactive_time='2037-01-01').filter(user_id=user_id).order_by('-active_time')[0]        #account_id=account_list.account_id        t_tmp = real_account(user_id=user_id)        t_tmp.save()        # 生成了ACCOUNTID        account_id = real_account.objects.filter(user_id=user_id).order_by('-active_time')[0].account_id        t=ucs_account(account_id=account_id,                      user_id=user_id,                      club_id=club_id,                      account_level=1)        t.save()        return True    except Exception as e:        return Falsedef SQL_user_list(club_id):    with connection.cursor() as cursor :        strSQL="select b.user_id,d.account_id,b.user_name,b.wx_name,a.club_name,b.note,c.active_time, " \               "concat(user_name,'(',ifnull(c.remark,b.user_name),')') " \               "from sdt_ucs_subs_club  a, sdt_ucs_subs_user  b, sdt_ucs_club_user c ,sdt_ucs_account d "\               "where a.club_id=c.club_id "\               "and c.user_id=b.user_id  "\	           "and b.user_id=d.user_id "\               "and d.club_id=%s "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(c.inactive_time,'%%Y')='2037' "\	           "and date_format(d.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s "\               "order by b.active_time desc "        tmp_parm=[club_id, club_id]        cursor.execute(strSQL, tmp_parm)        row = cursor.fetchall()    return rowdef getUserListUnion():    with connection.cursor() as cursor:        strSQL="select b.user_id,b.account_id,b.user_name,b.wx_name,a.club_name,b.note,c.active_time "\        "from sdt_ucs_subs_club  a, sdt_ucs_subs_user  b, sdt_ucs_club_user c "\        "where a.club_id=c.club_id " \        "and c.user_id=b.user_id " \        "and date_format(b.inactive_time,'%Y')='2037' " \        "and date_format(a.inactive_time,'%Y')='2037' " \        "and date_format(c.inactive_time,'%Y')='2037' "\        "order by b.active_time desc"        cursor.execute(strSQL)        tb_result=cursor.fetchall()    return tb_resultdef getUserListByClubId_1(club_id):    with connection.cursor() as cursor :        strSQL="select b.user_id,d.account_id,b.user_name,b.wx_name,a.club_name,ifnull(c.remark,''),c.active_time, "\        "concat(user_name,'(',ifnull(c.remark,b.user_name),')'), concat(round(c.feedback/1000,2),'%%')  "\        "from sdt_ucs_subs_club  a, sdt_ucs_subs_user  b, sdt_ucs_club_user c, sdt_ucs_account d "\        "where a.club_id=c.club_id " \        "and c.user_id=b.user_id " \        "and c.user_id=d.user_id "\        "and d.club_id=%s "\        "and date_format(d.inactive_time,'%%Y')='2037'" \        "and date_format(b.inactive_time,'%%Y')='2037' " \        "and date_format(a.inactive_time,'%%Y')='2037' " \        "and date_format(c.inactive_time,'%%Y')='2037' "\        "and c.club_id=%s "\        "order by c.active_time desc"        tmp_parm=[club_id, club_id]        cursor.execute(strSQL, tmp_parm)        row = cursor.fetchall()    return rowdef getUserListWithOutDeveByClubId(club_id):    with connection.cursor() as cursor:        strSQL="select b.user_id,d.account_id,b.user_name,b.wx_name,a.club_name,b.note,c.active_time "\               "from sdt_ucs_subs_club  a, sdt_ucs_subs_user  b, sdt_ucs_club_user c, sdt_ucs_account d "\               "where a.club_id=c.club_id "\               "and c.user_id=b.user_id "\               "and c.user_id=d.user_id "\               "and d.club_id=%s "\               "and date_format(d.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(c.inactive_time,'%%Y')='2037' "\               "and c.club_id=%s "\               "and b.user_id not in ( "\               "select e.user_id from sdt_ucs_club_developer e "\               "where date_format(e.inactive_time,'%%Y')='2037' "\               "and e.club_id=%s) "        tmp_parm = [club_id, club_id, club_id]        cursor.execute(strSQL, tmp_parm)        row = cursor.fetchall()    return rowdef getUserListByClubIdAll(club_id):    with connection.cursor() as cursor:        strSQL="select b.user_id,d.account_id,b.user_name,b.wx_name,a.club_name,b.note,c.active_time "\               "from sdt_ucs_subs_club  a, sdt_ucs_subs_user  b, sdt_ucs_club_user c, sdt_ucs_account d "\               "where a.club_id=c.club_id "\               "and c.user_id=b.user_id "\               "and c.user_id=d.user_id "\               "and d.club_id=%s "\               "and date_format(d.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(c.inactive_time,'%%Y')='2037' "\               "and c.club_id=%s "        tmp_parm = [club_id, club_id]        cursor.execute(strSQL, tmp_parm)        row = cursor.fetchall()    return rowdef getUserListByClubId(club_id):    with connection.cursor() as cursor:        strSQL="select b.user_id,d.account_id,b.user_name,b.wx_name,a.club_name,c.remark,date_format(c.active_time,'%%Y/%%m/%%d %%H:%%i:%%s') active_time, "\               "concat(if(c.feedback_type=0, \"水上水下返水\",\"水上返水\"),round(c.feedback/1000,2),'%%') feedback "\               "from sdt_ucs_subs_club  a, sdt_ucs_subs_user  b, sdt_ucs_club_user c, sdt_ucs_account d "\               "where a.club_id=c.club_id "\               "and c.user_id=b.user_id "\               "and c.user_id=d.user_id "\               "and d.club_id=%s "\               "and date_format(d.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(c.inactive_time,'%%Y')='2037' "\               "and c.club_id=%s "        tmp_parm = [club_id, club_id]        cursor.execute(strSQL, tmp_parm)        row = cursor.fetchall()    return rowdef getaccIDwithUserid(user_id):#用userid 获取accountid    try :        account_id = ucs_subs_user.objects.filter(inactive_time='2037-01-01').get(user_id=user_id).account_id    except Exception as e:        return e    return account_iddef getBalancebyaid(account_id, club_id):    with connection.cursor() as cursor:        strSQL="select ifnull(a.balance,0) balance from sdt_ucs_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.account_id=%s "\               "and a.club_id=%s "\               "order by updatetime desc "\               "limit 1"        tmp_parm=[account_id,club_id]        cnt=cursor.execute(strSQL,tmp_parm)        balance=cursor.fetchall()        if cnt==0:            t=0        else:t=balance[0][0]        balance=t    return balancedef getBalancebyuid(userid):    try :        account_id=ucs_subs_user.objects.filter(user_id=userid).get(inactive_time='2037-01-01').account_id        banlance=ucs_balance.objects.filter(account_id=account_id).order_by('-id')[0].balance    except Exception as e:        return 0    return banlancedef getBalanceList(account_id):    with connection.cursor() as cursor:        strsql="select b.user_id,b.user_name,a.account_id,truncate(a.balance/1000,2) balance, "\        "truncate(a.chance/1000,2) chance,a.chance_desc,a.updatetime "\        "From sdt_ucs_balance a,sdt_ucs_subs_user b "\        "where date_format(a.inactive_time,'%%Y')='2037' "\        "and date_format(b.inactive_time,'%%Y')='2037' "\        "and a.account_id = b.account_id "\        "and a.account_id = %s "\        "order by a.updatetime desc"        cursor.execute(strsql,account_id)        row = cursor.fetchall()    return rowdef getAnteList(blind_id):    with connection.cursor() as cursor:        strSQL="select a.ante from sdt_pm_ante a "\               "where a.blind_id=%s "        cursor.execute(strSQL, blind_id)        ante_list=cursor.fetchall()    return ante_listdef createGameNo(game_type_id, blind_id, ante):    game_type=pm_gametype.objects.get(type_id=game_type_id).type_desc    type_desc=pm_blind.objects.get(blind_id=blind_id).type_desc    day=time.strftime('%Y%m%d', time.localtime())    ante_desc=pm_ante.objects.filter(blind_id=blind_id).get(ante=ante).type_desc    try:        start = now().date()        end=start+timedelta(days=1)        if ucs_gameno.objects.filter(gametime__range=(start,end)).exists():            cnt=ucs_gameno.objects.filter(gametime__range=(start,end)).order_by('-gametime')[0].cnt            cnt=cnt+1            strcnt=str(cnt).zfill(3)            #strante=str(ante).zfill(2)            gameno=str(day)+game_type+str(type_desc)+ante_desc+strcnt            t=ucs_gameno(cnt=cnt,game_no=gameno)            t.save()            return gameno        else:            cnt="001"            strante=str(ante).zfill(2)            gameno=str(day)+game_type+str(type_desc)+ante_desc+cnt            t=ucs_gameno(cnt=cnt,game_no=gameno)            t.save()            return gameno    except Exception as e:        return Falsedef gameRegFunc(gameno, game_type, blind, ante,straddle, playercnt, duration, start_time, status_id,status, operator_id,group_name):    try:        if not ucs_gamerecord.objects.filter(game_no=gameno).exists():            t=ucs_gamerecord(game_no=gameno,                             game_type=game_type,                             blind=blind,                             ante=ante,                             playercnt=playercnt,                             buyin=0,                             duration=duration,                             start_time=start_time,                             status_id=status_id,                             status=status,                             operator_id=operator_id,                             straddle=straddle,                             group_name=group_name)            t.save()            return True    except Exception as e:        return Falsedef getTableList():    with connection.cursor() as cursor:        strSQL="select a.game_no,b.type_name,c.blind_desc, "\               "case when straddle=0 then '否' "\               "else '是' end straddle, "\               "date_format(a.start_time,'%m/%d %H:%i'),a.duration,a.status,a.group_name from sdt_ucs_gamerecord a, "\               "sdt_pm_gametype b, "\               "sdt_pm_blind c "\               "where a.status_id not in (4,5) "\               "and a.game_type=b.type_id "\               "and a.blind=c.blind_id "\               "and date_format(a.inactive_time, '%Y')='2037' "\               "order by a.start_time desc "        cursor.execute(strSQL)        tb_result=cursor.fetchall()    return tb_resultdef result_preload(strResult,gameno):    tmp_result.objects.filter(game_no=gameno).delete()    p = str(strResult).replace(":", " ")  # 替换：为空格    # 按照空格拆分    list_insert = []    cnt = 8    t = p.split()    listlen = len(t)    while cnt < listlen:        list_insert.append(            tmp_result(user_name=p.split()[cnt], type=p.split()[cnt + 1], score=p.split()[cnt + 2],game_no=gameno))  # 总带入        list_insert.append(            tmp_result(user_name=p.split()[cnt], type=p.split()[cnt + 3], score=p.split()[cnt + 4],game_no=gameno))  # 保险收益        list_insert.append(            tmp_result(user_name=p.split()[cnt], type=p.split()[cnt + 5], score=p.split()[cnt + 6],game_no=gameno))  # 牌局收益        list_insert.append(            tmp_result(user_name=p.split()[cnt], type=p.split()[cnt + 7], score=p.split()[cnt + 8],game_no=gameno))  # 总收入        cnt = cnt + 9    tmp_result.objects.bulk_create(list_insert)    t=tmp_result.objects.filter(game_no=gameno).filter(type='牌局收益').aggregate(sum_score=Sum('score'))    p=tmp_result.objects.filter(game_no=gameno).filter(type='保险收益').aggregate(sum_insure=Sum('score'))    q = tmp_result.objects.filter(game_no=gameno).filter(type='总收益').aggregate(sum_income=Sum('score'))    if t['sum_score'] == 0 and p['sum_insure'] == q['sum_income']:        return True    else:        return False#筛选战绩中新玩家def result_regNewUser(gameno):    with connection.cursor() as cursor:        strSQL="select DISTINCT a.user_name from sdt_tmp_result a "\                "where a.game_no=%s "\                "and a.user_name not in "\                "(select b.user_name from sdt_ucs_subs_user b,sdt_ucs_club_user a "\                "where date_format(b.inactive_time,'%%Y')='2037' "\                "and date_format(a.inactive_time,'%%Y')='2037' "\                "and b.user_id=a.user_id ) "        cursor.execute(strSQL,gameno)        row = cursor.fetchall()        if  len(row)>0 :            return row        else : return Falsedef result_attachclub(gameno):    userlist=[]    with connection.cursor() as cursor:        strSQL="select x.user_id,p.account_id,x.user_name,y.club_id,z.club_name,z.income_rate,z.insure_rate,x.game_no from ( "\                "select a.user_id,a.user_name,b.game_no,count(*) from sdt_ucs_subs_user a, "\                "(select distinct user_name,game_no from sdt_tmp_result) b, "\               "sdt_ucs_club_user c "\               "where a.user_name=b.user_name "\               "and date_format(a.inactive_time,'%%Y')='2037' "\               "and a.user_id=c.user_id "\               "and b.game_no=%s "\               "and date_format(c.inactive_time,'%%Y')='2037' "\               "group by a.user_id,a.user_name,b.game_no "\               "having count(*)>1) x, "\               "sdt_ucs_club_user y, "\               "sdt_ucs_subs_club z , "\               "sdt_ucs_account p "\               "where x.user_id=y.user_id "\		       "and x.user_id=p.user_id "\               "and z.club_id=p.club_id "\               "and z.club_lever<=1 "\			   "and date_format(p.inactive_time,'%%Y')='2037' "\               "and date_format(y.inactive_time,'%%Y')='2037'  "\               "and y.club_id=z.club_id "\               "and date_format(z.inactive_time,'%%Y')='2037' "\               "order by user_id asc "        cursor.execute(strSQL,gameno)        row = cursor.fetchall()        if len(row)>0:            sp_club=[]            tmp_id=row[0][0]            tmp_name=row[0][2]            for t in row:                if tmp_name == t[2]:                    sp_club.append((t[3], t[4]))                else:                    userlist.append((tmp_id,tmp_name, sp_club))                    sp_club = []                    tmp_name = t[2]                    tmp_id=t[0]                    sp_club.append((t[3], t[4]))            userlist.append((tmp_id, tmp_name, sp_club))            return userlist        else:            return userlistdef split_club(result_split={}):    tmp_club_user=[]    gameno=result_split.get('gameno')    if len(result_split) > 1:        tmp_result_attachclub_pre.objects.filter(gameno=gameno).delete()        for key in result_split:            if key != "gameno":                tmp_club_user.append(result_split[key])        lenlist=len(tmp_club_user)        i=0        tmp_result_attachclub_pre.objects.filter(gameno=gameno).delete()        while (i < lenlist):            t = tmp_result_attachclub_pre(gameno=gameno,                                    user_id=tmp_club_user[i],                                    user_name=tmp_club_user[i+1],                                    club_id=tmp_club_user[i+2])            t.save()            i=i+3        with connection.cursor() as cursor:            strSQL="insert into sdt_tmp_result_attachclub_pre (gameno,user_id,user_name,club_id) "\                   "select x.game_no,x.user_id,x.user_name,y.club_id from ( "\                   "select  b.game_no,a.user_id,a.user_name,count(*) from sdt_ucs_subs_user a, "\                   "(select distinct user_name,game_no from sdt_tmp_result) b, "\                   "sdt_ucs_club_user c "\                   "where a.user_name=b.user_name "\                   "and b.game_no=%s "\                   "and date_format(a.inactive_time,'%%Y')='2037' "\                   "and a.user_id=c.user_id "\                   "and date_format(c.inactive_time,'%%Y')='2037' "\                   "group by a.user_id,a.account_id,a.user_name,b.game_no "\                   "having count(*)=1) x, "\                   "sdt_ucs_club_user y, "\                   "sdt_ucs_subs_club z "\                   "where x.user_id=y.user_id "\                   "and date_format(y.inactive_time,'%%Y')='2037' "\                   "and y.club_id=z.club_id "\                   "and date_format(z.inactive_time,'%%Y')='2037' "\                   "order by user_id asc"            cursor.execute(strSQL, gameno)            strSQL="commit"            cursor.execute(strSQL)    else:        #没有需要手工分的俱乐部        with connection.cursor() as cursor:            strSQL="insert into sdt_tmp_result_attachclub_pre (gameno, user_id, user_name, club_id) "\                   "select x.game_no,x.user_id,x.user_name,y.club_id from ( "\                   "select  b.game_no,a.user_id,a.user_name,count(*) from sdt_ucs_subs_user a, "\                   "(select distinct user_name,game_no from sdt_tmp_result) b, "\                   "sdt_ucs_club_user c "\                   "where a.user_name=b.user_name "\                   "and game_no=%s "\                   "and date_format(a.inactive_time,'%%Y')='2037' "\                   "and a.user_id=c.user_id "\                   "and date_format(c.inactive_time,'%%Y')='2037' "\                   "group by a.user_id,a.account_id,a.user_name,b.game_no "\                   "having count(*)=1) x, "\                   "sdt_ucs_club_user y, "\                   "sdt_ucs_subs_club z "\                   "where x.user_id=y.user_id "\                   "and date_format(y.inactive_time,'%%Y')='2037' "\                   "and y.club_id=z.club_id "\                   "and date_format(z.inactive_time,'%%Y')='2037' "\                   "order by user_id asc"            cursor.execute(strSQL, gameno)            strSQL="commit"            cursor.execute(strSQL)    return Truedef result_reg(gameno):    tmp_result_step_1.objects.filter(game_no=gameno).delete()    tmp_result_step_2.objects.filter(game_no=gameno).delete()    tmp_result_step_3.objects.filter(game_no=gameno).delete()    #匹配俱乐部信息    with connection.cursor() as cursor:        strsql="insert into sdt_tmp_result_step_1 (user_id,account_id,user_name, club_id, club_name,income_rate,insure_rate,game_no) "\               "select a.user_id,c.account_id,a.user_name,b.club_id,b.club_name,b.income_rate,b.insure_rate,a.gameno "\               "from sdt_tmp_result_attachclub_pre a, "\               "sdt_ucs_subs_club b, "\               "sdt_ucs_account c "\               "where a.club_id=b.club_id "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and a.user_id=c.user_id "\               "and b.club_id=c.club_id "\               "and date_format(c.inactive_time,'%%Y')='2037' "\               "and a.gameno=%s "        cursor.execute(strsql, gameno)        strsql="commit"        cursor.execute(strsql)        strsql="insert into sdt_tmp_result_step_2 (user_id,account_id,club_id,club_name,user_name,type,score,income_rate,income,game_no,score_final) "\            "select b.user_id,b.account_id,b.club_id,b.club_name,b.user_name,a.type,round(a.score*1000),"\            "b.income_rate,round(abs(a.score*b.income_rate/100*0.025)*1000) income , b.game_no, "\            "case when a.score>0 then a.score*0.95*1000 else a.score*1000 end score_final "\            "from sdt_tmp_result a,sdt_tmp_result_step_1 b "\            "where a.user_name=b.user_name "\            "and a.type=\"总收益\" "\            "and a.game_no=b.game_no "\            "and a.game_no=%s "\			"union all "\            "select b.user_id,b.account_id,b.club_id,b.club_name,b.user_name,a.type,round(a.score*1000),"\            "b.income_rate,round((a.score*b.insure_rate/100*-0.975)*1000) insure ,b.game_no, " \            "case when a.score>0 then a.score*0.95*1000 else a.score*1000 end score_final " \            "from sdt_tmp_result a,sdt_tmp_result_step_1 b "\            "where a.user_name=b.user_name "\            "and a.type=\"保险收益\"" \            "and a.game_no=b.game_no " \            "and a.game_no=%s"        tmp_gameno=[gameno,gameno]        cursor.execute(strsql,tmp_gameno)        strsql="commit"        cursor.execute(strsql)        strsql="insert into sdt_tmp_result_step_3 (user_id,account_id,user_name,club_id,club_name,score,income_water,waterup,"\			"insure,income_insure,insure_up,income_total,up_total,delivery,game_no,score_final) "\            "select a.user_id,a.account_id, a.user_name,a.club_id,a.club_name,a.score ,a.income income_water, "\            "round(abs(a.score)*0.025-a.income) waterup, "\            "b.score insure,b.income income_insure,round((b.score*-0.975-b.income)) insure_up,a.income+b.income income_total, "\            "round((abs(a.score)*0.025-a.income+(b.score*-0.975-b.income))) up_total, "\			"round((a.score_final+a.income+b.income)) delivery,a.game_no,a.score_final "\            "from (select * from sdt_tmp_result_step_2 where type=\"总收益\") as a, "\            "(select * from sdt_tmp_result_step_2 where type=\"保险收益\") as b "\            "where a.user_id=b.user_id and a.game_no=b.game_no and a.game_no=%s "        cursor.execute(strsql, gameno)        strsql="commit"        cursor.execute(strsql)        strsql="select user_name,club_name,round(income_water/1000,2) income_water, "\            "round(score/1000,2) score,round(waterup/1000,2) waterup,round(insure/1000,2) insure, "\            "round(income_insure/1000,2) income_insure,round(insure_up/1000,2) insure_up, "\            "round(income_total/1000,2) income_total,round(up_total/1000,2) up_total, "\            "round(delivery/1000,2) delivery "\            "from sdt_tmp_result_step_3 a where a.game_no=%s"        cursor.execute(strsql, gameno)        try:            tb_result=cursor.fetchall()        except Exception as e:            return e    return tb_resultdef result_record(gameno, operator_id, club_id):    main_club_id=club_id    if ucs_result_table_l1.objects.filter(inactive_time='2037-01-01').filter(game_no = gameno).exists():        return False    else:        with connection.cursor() as cursor:            # 存战绩玩家表            strSQL = "insert into sdt_ucs_result_table "\                     "(game_no,user_id,account_id,user_name,club_id,club_name,score,score_final, "\                     "income_water,waterup,insure,income_insure,insure_up,income_total,up_total, "\                     "delivery,operator_id,active_time,inactive_time) "\                     "select a.game_no, a.user_id,a.account_id,a.user_name,a.club_id,a.club_name,a.score, a.score_final, "\                     "a.income_water, a.waterup,a.insure,income_insure,a.insure_up, a.income_total,a.up_total, "\                     "a.delivery,%s,now(),'2037-01-01' "\                     "from sdt_tmp_result_step_3 a "\                     "where a.game_no=%s "            tmp_parm = [operator_id, gameno]            cursor.execute(strSQL, tmp_parm)            # 存战绩一级俱乐部表            strSQL="insert into sdt_ucs_result_table_l1(user_id,account_id,user_name,club_id,club_name,score,score_final,income_water, "\                "waterup,insure,income_insure, insure_up,income_total,up_total,delivery,game_no,operator_id,active_time,inactive_time, " \                "flag, level, main_club_id,reg_month,developer_id) "\                "select a.user_id,a.account_id,a.user_name,a.club_id,a.club_name,a.score,a.score_final,a.income_water, "\                "a.waterup,a.insure,a.income_insure,a.insure_up,a.income_total,a.up_total,a.delivery, "\                "a.game_no,%s,now(),'2037-01-01', 0 , 0, %s ,'',null "\                "from sdt_tmp_result_step_3 a "\                "where a.game_no= %s "            tmp_parm = [operator_id,club_id,gameno]            cursor.execute(strSQL, tmp_parm)            #club_l1_list=ucs_subs_club.objects.filter(inactive_time='2037-01-01').filter(club_lever=1).values('club_id')            club_l1_list=ucs_result_table_l1.objects.filter(inactive_time='2037-01-01').filter(game_no=gameno).values('club_id').distinct()            #存战绩俱乐部内部分账表            #ucs_result_table_tmp.objects.filter(game_no=gameno).delete();            for t in club_l1_list:                t_club_id=t['club_id']                ucs_result_table_tmp.objects.filter(game_no=gameno).delete();                strSQL="insert into sdt_ucs_result_table_tmp "\                       "(user_id, account_id,user_name,club_id,club_name,score,score_final,income_water,waterup, "\                       "insure,income_insure,insure_up,income_total,up_total,delivery,game_no,operator_id,active_time,inactive_time, "\                       "flag,level,main_club_id,reg_month,developer_id) "\                       "select a.user_id,a.account_id,a.user_name,null,'', "\                       "a.score,a.score_final, round(abs(a.score*(c.income_rate/100)*0.025)) income_water, "\                       "round(abs(a.score*(1-c.income_rate/100)*0.025)) waterup, "\                       "a.insure,round(a.insure*c.insure_rate/100*-0.975) income_insure, "\                       "round(a.insure*(1-c.insure_rate/100)*-0.975) insure_up, "\                       "(round(abs(a.score*(c.income_rate/100)*0.025)) + round(a.insure*c.insure_rate/100*-0.975))  income_total, "\                       "(round(abs(a.score*(1-c.income_rate/100)*0.025))+round(a.insure*(1-c.insure_rate/100)*-0.975)) up_total, "\                       "(round(abs(a.score*(c.income_rate/100)*0.025)) + round(a.insure*c.insure_rate/100*-0.975)+a.score_final) delivery, "\                       "a.game_no,a.operator_id,a.active_time,a.inactive_time, flag,'2',%s,reg_month,c.developer_id "\                       "from sdt_ucs_result_table_l1 a, "\                       "sdt_ucs_club_developer b, "\                       "sdt_ucs_developer c "\                       "where a.user_id=b.user_id "\                       "and date_format(a.inactive_time,'%%Y')='2037' "\                       "and date_format(b.inactive_time,'%%Y')='2037' "\                       "and date_format(c.inactive_time,'%%Y')='2037' "\                       "and a.club_id=%s "\                       "and b.club_id=%s "\                       "and c.club_id=%s "\                       "and a.game_no=%s "\                       "and b.developer_id=c.developer_id "                tmp_parm = [t_club_id,t_club_id,t_club_id, t_club_id, gameno]                cursor.execute(strSQL, tmp_parm)#非托管俱乐部功能未实现，上交部分暂用0代替                strSQL="insert into sdt_ucs_result_table_l2_tmp "\                       "(user_id,account_id,user_name,club_id,club_name,score,score_final,income_water, "\                       "waterup,insure,income_insure,insure_up,income_total,up_total,delivery,game_no,operator_id, "\                       "active_time,inactive_time,flag,level,main_club_id,reg_month,developer_id) "\                       "select user_id,account_id,user_name,club_id,club_name,score,score_final,income_water, "\                       "0,insure,income_insure,0,income_total,0,delivery,game_no,operator_id, "\                       "active_time,inactive_time,flag,level,%s,reg_month,developer_id "\                       "from sdt_ucs_result_table_l1 a "\                       "where a.user_id not in( "\                       "select b.user_id from sdt_ucs_result_table_tmp b "\                       "where b.game_no=%s) "\                       "and a.club_id=%s "\                       "and a.game_no=%s "\                       "union all "\                       "select user_id,account_id,user_name,club_id,club_name,score,score_final,income_water, "\                       "waterup,insure,income_insure,insure_up,income_total,up_total,delivery,game_no,operator_id, "\                       "active_time,inactive_time,flag,level,%s,reg_month,developer_id from sdt_ucs_result_table_tmp x "\                       "where x.main_club_id=%s "\                       "and x.game_no=%s "                tmp_parm = [t_club_id,gameno, t_club_id,gameno, t_club_id, t_club_id, gameno]                cursor.execute(strSQL, tmp_parm)                strSQL="insert into sdt_ucs_result_table_l2 "\                       "(user_id,account_id,user_name,club_id,club_name,score,score_final,income_water, "\                       "waterup,insure,income_insure,insure_up,income_total,up_total,delivery,game_no,operator_id, "\                       "active_time,inactive_time,flag,level,main_club_id,reg_month,developer_id,feedback) "\                       "select a.user_id,a.account_id,a.user_name,a.club_id,a.club_name,a.score,(a.score_final+b.feedback) score_final, "\                       "(a.income_water-b.feedback) income_water,a.waterup,a.insure,a.income_insure,a.insure_up, "\                       "(a.income_total-b.feedback) income_total,a.up_total,a.delivery,a.game_no, "\                       "a.operator_id,a.active_time,a.inactive_time,a.flag,a.level,a.main_club_id,a.reg_month,a.developer_id,b.feedback "\                       "from sdt_ucs_result_table_l2_tmp a, "\                       "(select a.user_id, "\                       "convert( "\                       "if (b.feedback_type=0,abs(score*b.feedback/100000), "\                       "if (score>0,score*b.feedback/100000,0)) ,signed) feedback "\                       "from sdt_ucs_result_table_l2_tmp a, "\                       "sdt_ucs_club_user b "\                       "where a.user_id=b.user_id "\                       "and date_format(a.inactive_time,'%%Y')='2037' "\                       "and date_format(b.inactive_time,'%%Y')='2037' "\                       "and a.game_no=%s "\                       "and a.main_club_id=b.club_id "\                       "and a.main_club_id=%s) b "\                       "where a.user_id=b.user_id "\                       "and date_format(a.inactive_time,'%%Y')='2037' "\                       "and a.game_no=%s "\                       "and a.main_club_id=%s "                tmp_parm=[gameno,t_club_id,gameno,t_club_id]                cursor.execute(strSQL, tmp_parm)        ucs_result_table_tmp.objects.filter(game_no=gameno).delete()       # tmp_result.objects.filter(game_no=gameno).delete()        tmp_result_attachclub_pre.objects.filter(gameno=gameno).delete()        tmp_result_step_1.objects.filter(game_no=gameno).delete()        tmp_result_step_2.objects.filter(game_no=gameno).delete()        tmp_result_step_3.objects.filter(game_no=gameno).delete()        ucs_result_table_l2_tmp.objects.filter(game_no=gameno).delete()        return Truedef resultCompanyIncome(game_no):    return Truedef gamenolist():    gamelist=ucs_result_table_l1.objects.filter(inactive_time='2037-01-01').values("game_no").distinct()    return gamelistdef club_check(club_name):    isexist=True    try:        ucs_subs_club.objects.filter(club_name=club_name).get(inactive_time="2037-01-01")    except :        isexist = False        return isexist    return isexist'''def user_check(user_name):    isexist=True    try:        ucs_subs_user.objects.filter(user_name=user_name).get(inactive_time="2037-01-01")    except :        isexist=False        return isexist    return isexist'''def result_searchByclub(club_id,starttime,endtime):    with connection.cursor() as cursor:        strSQL = "select a.game_no,date_format(a.active_time,'%%c-%%d %%H:%%i') record_time, "\                 "round(sum(a.score_final)/1000,2) score_final, "\                 "count(*) cnt, "\                 "round(sum(a.income_water)/1000,2) income_water, "\                 "round(sum(a.income_insure)/1000,2) income_insure, "\                 "round(sum(a.income_total)/1000,2) income_total, "\                 "round(sum(a.up_total)/1000,2) up_total, "\                 "round(sum(a.delivery)/1000,2) delivery "\                 "from sdt_ucs_result_table_l1 a "\                 "where a.club_id=%s "\                 "and date_format(a.inactive_time,'%%Y')='2037' "\                 "and date_format(a.active_time,'%%Y-%%m-%%d') BETWEEN %s and %s "\                 "and a.is_modify=0 "\                 "group by game_no,date_format(a.active_time,'%%c-%%d %%H:%%i')" \                 "order by record_time desc"        tmp_parm = [club_id, starttime, endtime]        cursor.execute(strSQL, tmp_parm)        tb_result=cursor.fetchall()    return  tb_resultdef result_searchByclubSum(club_id,starttime,endtime):    with connection.cursor() as cursor:        strSQL = "select "\                 "round(sum(a.score_final)/1000,2) score_final, "\                 "count(*) cnt, "\                 "round(sum(a.income_water)/1000,2) income_water, "\                 "round(sum(a.income_insure)/1000,2) income_insure, "\                 "round(sum(a.income_total)/1000,2) income_total, "\                 "round(sum(a.up_total)/1000,2) up_total, "\                 "round(sum(a.delivery)/1000,2) delivery "\                 "from sdt_ucs_result_table_l1 a "\                 "where a.club_id=%s " \                 "and date_format(a.active_time,'%%Y-%%m-%%d') BETWEEN %s and %s " \                 "and date_format(a.inactive_time,'%%Y')='2037' "\                 "and a.is_modify=0 "        tmp_parm = [club_id, starttime, endtime]        cursor.execute(strSQL, tmp_parm)        tb_result=cursor.fetchall()    return  tb_resultdef result_searchByclubTime(club_id,starttime,endtime):    with connection.cursor() as cursor:        strSQL = "select a.game_no,date_format(a.active_time,'%%c-%%d %%H:%%i') record_time, "\                 "round(sum(a.score_final)/1000,2) score_final, "\                 "count(*) cnt, "\                 "round(sum(a.income_water)/1000,2) income_water, "\                 "round(sum(a.income_insure)/1000,2) income_insure, "\                 "round(sum(a.income_total)/1000,2) income_total, "\                 "round(sum(a.up_total)/1000,2) up_total, "\                 "round(sum(a.delivery)/1000,2) delivery "\                 "from sdt_ucs_result_table_l1 a "\                 "where a.club_id=%s "\                 "and date_format(a.inactive_time,'%%Y')='2037' "\                 "and a.active_time BETWEEN str_to_date(%s,'%%Y-%%m-%%d %%H:%%i') and str_to_date(%s,'%%Y-%%m-%%d %%H:%%i') "\                 "and a.is_modify=0 "\                 "group by game_no,date_format(a.active_time,'%%c-%%d %%H:%%i')" \                 "order by record_time desc"        tmp_parm = [club_id, starttime, endtime]        cursor.execute(strSQL, tmp_parm)        tb_result=cursor.fetchall()    return  tb_resultdef result_searchByclubSumTime(club_id,starttime,endtime):    with connection.cursor() as cursor:        strSQL = "select "\                 "round(sum(a.score_final)/1000,2) score_final, "\                 "count(*) cnt, "\                 "round(sum(a.income_water)/1000,2) income_water, "\                 "round(sum(a.income_insure)/1000,2) income_insure, "\                 "round(sum(a.income_total)/1000,2) income_total, "\                 "round(sum(a.up_total)/1000,2) up_total, "\                 "round(sum(a.delivery)/1000,2) delivery "\                 "from sdt_ucs_result_table_l1 a "\                 "where a.club_id=%s " \                 "and a.active_time BETWEEN str_to_date(%s,'%%Y-%%m-%%d %%H:%%i') and str_to_date(%s,'%%Y-%%m-%%d %%H:%%i') " \                 "and date_format(a.inactive_time,'%%Y')='2037' "\                 "and a.is_modify=0 "        tmp_parm = [club_id, starttime, endtime]        cursor.execute(strSQL, tmp_parm)        tb_result=cursor.fetchall()    return  tb_result''''def result_searchUnionbyclub(starttime,endtime):    with connection.cursor() as cursor:        strSQL = "select a.club_id,a.club_name, "\                "count(distinct a.game_no) game_cnt, "\                "round(sum(a.score_final)/1000,2) score_final, "\                "count(*) player_cnt, "\                "round(sum(a.income_water)/1000,2) income_water, "\                "round(sum(a.income_insure)/1000,2) income_insure, "\                "round(sum(a.income_total)/1000,2) income_total, "\                "round(sum(a.up_total)/1000,2) up_total, "\                "round(sum(a.delivery)/1000,2) delivery "\                "from sdt_ucs_result_table_l1 a " \                "where  date_format(a.active_time,'%%Y-%%m-%%d') BETWEEN %s and %s "\                "and date_format(a.inactive_time,'%%Y')='2037' "\                "group by club_id,club_name" \                " order  by club_id asc"        tmp_parm=[starttime, endtime]        cursor.execute(strSQL, tmp_parm)        tb_result =cursor.fetchall()    return tb_result'''''#联盟业绩查询（一级俱乐部全）def result_searchUnionbyclub(starttime,endtime,club_id):    with connection.cursor() as cursor:        strSQL ="select game.*,ifnull(round(ban.balance/1000,2),0) balance from( "\                "select y.account_id,x.* from( "\                "select a.club_id,a.club_name, "\                "count(distinct a.game_no) game_cnt, "\                "round(sum(a.score_final)/1000,2) score_final, "\                "count(*) player_cnt, "\                "round(sum(a.income_water)/1000,2) income_water, "\                "round(sum(a.income_insure)/1000,2) income_insure, "\                "round(sum(a.income_total)/1000,2) income_total, "\                "round(sum(a.up_total)/1000,2) up_total, "\                "round(sum(a.delivery)/1000,2) delivery "\                "from sdt_ucs_result_table_l1 a "\                "where  date_format(a.active_time,'%%Y-%%m-%%d') BETWEEN %s and %s "\                "and a.is_modify=0 "\                "and date_format(a.inactive_time,'%%Y')='2037' "\                "group by a.club_id,a.club_name "\                "order  by club_id asc) x, "\                "sdt_ucs_union_account y "\                "where x.club_id=y.club_id "\                "and date_format(y.inactive_time,'%%Y')='2037' ) game left join "\                "(select  x.account_id,x.balance from (select a.account_id,a.update_time,a.balance from sdt_ucs_union_balance a "\                "where date_format(a.inactive_time,'%%Y')='2037' and a.main_club_id=%s) x, "\                "(select a.account_id,a.update_time from (select a.account_id,a.update_time from sdt_ucs_union_balance a "\                "where date_format(a.inactive_time,'%%Y')='2037' "\                "and a.main_club_id=%s) a "\                "left join (select a.account_id,a.update_time from sdt_ucs_union_balance a "\                "where date_format(a.inactive_time,'%%Y')='2037' and a.main_club_id=%s) b "\                "on a.account_id=b.account_id and a.update_time<=b.update_time "\                "group by a.account_id,a.update_time "\                "having count(b.account_id)=1) y "\                "where x.account_id=y.account_id "\                "and x.update_time=y.update_time "\                "order by x.account_id,x.update_time desc) ban "\                "on game.account_id=ban.account_id "        tmp_parm=[starttime, endtime,club_id,club_id,club_id]        cursor.execute(strSQL, tmp_parm)        tb_result =cursor.fetchall()    return tb_result#联盟业绩查询（一级俱乐部全合计值）def result_searchUnionbyclubsum(starttime,endtime,club_id):    with connection.cursor() as cursor:        strSQL = "select "\                "count(distinct a.game_no) game_cnt, "\                "round(sum(a.score_final)/1000,2) score_final, "\                "count(*) player_cnt, "\                "round(sum(a.income_water)/1000,2) income_water, "\                "round(sum(a.income_insure)/1000,2) income_insure, "\                "round(sum(a.income_total)/1000,2) income_total, "\                "round(sum(a.up_total)/1000,2) up_total, "\                "round(sum(a.delivery)/1000,2) delivery "\                "from sdt_ucs_result_table_l1 a " \                "where  date_format(a.active_time,'%%Y-%%m-%%d') BETWEEN %s and %s "\                "and date_format(a.inactive_time,'%%Y')='2037' "\                "and a.main_club_id=%s "\                "and a.is_modify=0 "        tmp_parm=[starttime, endtime, club_id]        cursor.execute(strSQL, tmp_parm)        tb_result =cursor.fetchall()    return tb_result#联盟业绩查询（单俱乐部）def resultSearchUnionBySingleClub(starttime,endtime,club_id):    with connection.cursor() as cursor:        strSQL="select a.club_id,a.club_name, "\               "count(distinct a.game_no) game_cnt, "\               "round(sum(a.score_final)/1000,2) score_final, "\               "count(*) player_cnt, "\               "round(sum(a.income_water)/1000,2) income_water, "\               "round(sum(a.income_insure)/1000,2) income_insure, "\               "round(sum(a.income_total)/1000,2) income_total, "\               "round(sum(a.up_total)/1000,2) up_total, "\               "round(sum(a.delivery)/1000,2) delivery "\               "from sdt_ucs_result_table_l1 a "\               "where  a.active_time BETWEEN str_to_date(%s,'%%Y-%%m-%%d %%H:%%i') and str_to_date(%s,'%%Y-%%m-%%d %%H:%%i') "\               "and a.is_modify=0 "\               "and date_format(a.inactive_time,'%%Y')='2037' "\	           "and club_id=%s "\               "group by a.club_name "        tmp_parm=[starttime, endtime, club_id]        cursor.execute(strSQL, tmp_parm)        tb_result =cursor.fetchall()    return tb_resultdef resultSearchUnionBySingleClubSum(starttime,endtime,club_id):    with connection.cursor() as cursor:        strSQL = "select "\                "count(distinct a.game_no) game_cnt, "\                "round(sum(a.score_final)/1000,2) score_final, "\                "count(*) player_cnt, "\                "round(sum(a.income_water)/1000,2) income_water, "\                "round(sum(a.income_insure)/1000,2) income_insure, "\                "round(sum(a.income_total)/1000,2) income_total, "\                "round(sum(a.up_total)/1000,2) up_total, "\                "round(sum(a.delivery)/1000,2) delivery "\                "from sdt_ucs_result_table_l1 a " \                "where  a.active_time BETWEEN str_to_date(%s,'%%Y-%%m-%%d %%H:%%i') and str_to_date(%s,'%%Y-%%m-%%d %%H:%%i') "\                "and date_format(a.inactive_time,'%%Y')='2037' "\                "and a.club_id=%s "\                "and a.is_modify=0 "        tmp_parm=[starttime, endtime, club_id]        cursor.execute(strSQL, tmp_parm)        tb_result =cursor.fetchall()    return tb_result#获取单用户冻结总额def getUserFreezeSum(account_id,club_id):    with connection.cursor() as cursor:        strSQL="select sum(a.freeze_num) freeze_num from sdt_ucs_game_freeze_record a "\               "where a.club_id=%s "\               "and date_format(a.inactive_time,'%%Y')='2037' "\               "and a.account_id=%s "\               "and a.status='预占用' "        tmp_parm = [club_id, account_id]        cursor.execute(strSQL, tmp_parm)        tb_result = cursor.fetchall()        if tb_result[0][0] is None:            freeze_num=0        else:freeze_num=tb_result[0][0]    return freeze_numdef getUserAccountInfo(account_id,club_id):    #获取主和子账户全部名称    with connection.cursor() as cursor:        strSQL="select b.user_name,account_level from "\               "sdt_ucs_account a, "\               "sdt_ucs_subs_user b "\               "where a.account_id=%s "\               "and a.club_id=%s "\               "and date_format(a.inactive_time,'%%Y')='2037' "\               "and a.user_id=b.user_id "\               "and date_format(b.inactive_time,'%%Y')='2037' "        tmp_parm = [account_id, club_id]        cursor.execute(strSQL, tmp_parm)        tb_result = cursor.fetchall()    account_list=tb_result    try:        account_balance=ucs_balance.objects.filter(inactive_time='2037-01-01').filter(account_id = account_id).filter(club_id =club_id)\            .order_by('-id')[0].balance    except:        account_balance=0    try:        credit_num = ucs_credit_account.objects.filter(inactive_time='2037-01-01').filter(club_id=club_id)\            .get(account_id=account_id).credit_num    except :        credit_num=0    with connection.cursor() as cursor:        strSQL="select sum(a.freeze_num) freeze_num from sdt_ucs_game_freeze_record a "\               "where a.club_id=%s "\               "and date_format(a.inactive_time,'%%Y')='2037' "\               "and a.account_id=%s "\               "and a.status='预占用' "        tmp_parm = [club_id, account_id]        cursor.execute(strSQL, tmp_parm)        tb_result = cursor.fetchall()        if tb_result[0][0] is None:            freeze_num=0        else:freeze_num=tb_result[0][0]    tb_account={}    tb_account['credit_num']=round(credit_num/1000,2)    tb_account['account_balance']=round(account_balance/1000,2)    tb_account['freeze_num']=round(freeze_num/1000,2)    main_account=""    tb_account_list=""    balance_useful=round((credit_num+account_balance-freeze_num)/1000,2)    balance_cashout=round((account_balance-freeze_num)/1000, 2)    for t in account_list:        if t[1]==1:            main_account=t[0]        tb_account_list=tb_account_list+ t[0]+";"    tb_account['main_account']=main_account    tb_account['tb_account_list']=tb_account_list    tb_account['balance_useful']=balance_useful    tb_account['balance_cashout']=balance_cashout    return tb_account#通过USERID获取玩家俱乐部内发展信息def getUserDeveloperByUserId(user_id,club_id):    with connection.cursor() as cursor:        strSQL="select b.developer_id,a.developer_name from sdt_ucs_developer a, "\               "sdt_ucs_club_developer b "\               "where a.developer_id=b.developer_id "\               "and date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s "\               "and b.user_id=%s"        tmp_parm = [club_id, user_id]        cursor.execute(strSQL,tmp_parm)        tb_result=cursor.fetchall()    return tb_resultdef getUserBalenceList(account_id,club_id):    with connection.cursor() as cursor:        strSQL="select a.user_id,a.account_id,b.user_name," \               "round(a.chance/1000,2) chance,round(a.balance/1000,2) balance,a.chance_desc," \               "date_format(a.updatetime,'%%m-%%d %%T'), " \               "a.note from sdt_ucs_balance a, "\               "sdt_ucs_subs_user b "\               "where a.user_id=b.user_id "\               "and date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s "\               "and a.account_id=%s "\               "order by a.id desc " \               "limit 10"        tmp_parm = [club_id, account_id]        cursor.execute(strSQL,tmp_parm)        tb_result=cursor.fetchall()    return tb_result#用户存款结账def userCashReg(account_id,user_id,club_id,cashtype,operator_id,change_num,note,serial_no):    balance=0    change_desc=pm_op_type.objects.filter(inactive_time='2037-01-01').get(op_type_id=cashtype).op_type_name    try:        user_balance=ucs_balance.objects.filter(inactive_time="2037-01-01").filter(club_id=club_id)\            .filter(account_id=account_id).order_by("-id")[0].balance        if user_balance is None:            balance=0        else:            balance=user_balance    except: balance=0    if cashtype<2000:        balance=balance+change_num    elif cashtype>2000:        change_num=-change_num        if balance+change_num>=0:            balance=balance+change_num        else: return False    t=ucs_balance(account_id=account_id,                  user_id=user_id,                  club_id=club_id,                  balance=balance,                  chance=change_num,                  operator_id=operator_id,                  type_id=cashtype,                  chance_desc=change_desc,                  serial_no=serial_no,                  note=note                  )    t.save()    return True#托管俱乐部写余额表def developer_cash(developer_id, club_id,chance,type_id,operator_id, note, serial_no,user_id):    try:        balance=ucs_developer_balance.objects.filter(inactive_time='2037-01-01').filter(developer_id=developer_id)\            .filter(club_id=club_id).order_by('-id')[0].balance    except:        balance=0    if type_id<2000:        balance=balance+chance    else:        balance=balance-chance    try:        t=ucs_developer_balance(serial_no=serial_no,                                developer_id=developer_id,                                club_id=club_id,                                chance=chance,                                balance=balance,                                type_id=type_id,                                operator_id=operator_id,                                note=note,                                user_id=user_id)        t.save()        return True    except Exception as e:        return False#增加客服组def add_group(group_name,club_id):    message=False    try:        result=ucs_operator_group.objects.filter(group_name=group_name)\            .filter(inactive_time='2037-01-01').filter(club_id=club_id).exists()        if result:            message=False            return message        else:            t=ucs_operator_group(group_name=group_name,                                 club_id=club_id)            t.save()            #message=True            group_id = ucs_operator_group.objects.filter(inactive_time='2037-01-01').get(group_name=group_name).group_id            return group_id    except Exception as e:        return e#注册新操作员def add_operator_func(operator_name, login_id, club_id,permission_group_id,developer_id):    message=False    try:        result=ucs_operator.objects.filter(inactive_time='2037-01-01').filter(club_id=club_id)\            .filter(login_id=login_id).exists()        if result:            message = False            return message        else:            try:                result=ucs_operator.objects.aggregate(max_id=Max('operator_id'))                operator_id = result['max_id']                operator_id = operator_id + 1            except Exception as e:                operator_id = '3000'            ps = '123456'            dj_ps = make_password(ps, None, 'pbkdf2_sha256')            t = ucs_operator(operator_id=operator_id, operator_name=operator_name,                             login_id=login_id, club_id=club_id, password=dj_ps, permission_group=permission_group_id,                             developer_id=developer_id)            t.save()            message = True    except Exception as e:        return e    return messagedef operator_relation_list(club_id):    with connection.cursor() as cursor:        strSQL="select b.group_id,b.group_name,a.operator_name From sdt_ucs_operator a, "\               "sdt_ucs_operator_group b "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.group_id=b.group_id "\               "and a.club_id=%s "\               "order by b.group_id asc "        cursor.execute(strSQL,club_id)        tb_result=cursor.fetchall()    return tb_resultdef create_club_accountID(club_id):    try:        result=ucs_club_account.objects.filter(inactive_time='2037-01-01').filter(club_id=club_id).exists()        if result == False:            account_id=6000000+int(club_id)*100+1            return account_id        else:            result=ucs_club_account.objects.filter(club_id=club_id).aggregate(max_id=Max('account_id'))            account_id=result['max_id'] + 1            return account_id    except Exception as e:        return False#新增俱乐部内账户def create_club_account(account_id, club_id, type_id, group_id, account_desc):    try:        t=ucs_club_account(account_id=account_id,                         club_id = club_id,                         type_id = type_id,                         group_id = group_id,                           account_desc=account_desc)        t.save()        return True    except :        return Falsedef club_account_group_list(club_id, group_id):    try:        tb_result=ucs_operator_group.objects.filter(club_id=club_id).filter(group_id=group_id)        return tb_result    except Exception as e:        return edef operator_login(login_id, password):    operator_info = {}    try:        tb_op = ucs_operator.objects.filter(inactive_time='2037-01-01').get(login_id=login_id)        if check_password(password,tb_op.password):            operator_info['operator_id']=tb_op.operator_id            operator_info['operator_name']=tb_op.operator_name            operator_info['club_id']=tb_op.club_id            operator_info['is_active']=tb_op.is_active            operator_info['developer_id'] = tb_op.developer_id            operator_info['permission_group']=tb_op.permission_group            if tb_op.group_id is not None:                operator_info['group_id']=tb_op.group_id            else:                operator_info['group_id'] = 0        else:            return False    except Exception as e:        return False    try:        tb_club = ucs_subs_club.objects.filter(inactive_time='2037-01-01').get(club_id=tb_op.club_id)        operator_info['club_name'] = tb_club.club_name        operator_info['club_level']=tb_club.club_lever    except Exception as e:        return False    if tb_op.group_id is not None:        try:            group_name = ucs_operator_group.objects.filter(inactive_time='2037-01-01') \                .filter(club_id=tb_op.club_id).get(group_id=tb_op.group_id).group_name            operator_info['group_name'] = group_name        except:            return False    else: operator_info['group_name'] =""    return operator_infodef createPermissionMenu(group_id):    menu_tree=getMenuTreeByGroupId(group_id)    menu_l1=menu_tree[0][2]    menu={}    subs_menu=[]    for t in menu_tree:        if menu_l1==t[2]:            subs_menu.append((t[5],t[6]))        else:            menu[menu_l1]=(copy.deepcopy(subs_menu))            menu_l1=t[2]            subs_menu.clear()            subs_menu.append((t[5],t[6]))    menu[menu_l1] = (copy.deepcopy(subs_menu))    return menudef getAllMenuTree():    menu_tree=getMenuTreeByAll()    menu_l1 = menu_tree[0][1]    menu={}    subs_menu=[]    for t in menu_tree:        if menu_l1==t[1]:            subs_menu.append((t[2],t[4]))        else:            menu[menu_l1] = (copy.deepcopy(subs_menu))            menu_l1 = t[1]            subs_menu.clear()            subs_menu.append((t[2],t[4]))    menu[menu_l1] = (copy.deepcopy(subs_menu))    return menudef get_club_account_infoByGroup(club_id,group_id):    tb_result=[]    sum_balance=0    tb_account_list=get_account_type_list(club_id,group_id)    for t in tb_account_list:        try:            balance=ucs_club_balance.objects.filter(inactive_time='2037-01-01').filter(account_id=t[1]).order_by('-id')[0].balance            tb_result.append((t[0], round(balance/1000,2)))            sum_balance=sum_balance+round(balance/1000,2)        except Exception as e:            tb_result.append((t[0], 0))    tb_result_2=[]    tb_result_2.extend(tb_result)    tb_result_2.append(("账户合计", sum_balance))    return tb_result_2def get_club_account_SumByGroup(club_id, group_id):    with connection.cursor() as cursor:        strSQL="select truncate(ifnull(sum(b.balance/1000),0),2)  balance_sum from sdt_ucs_club_account a, "\               "sdt_ucs_club_balance b "\               "where a.account_id=b.account_id "\               "and date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s "\               "and a.group_id=%s "        tmp_parm = [club_id, group_id]        cursor.execute(strSQL, tmp_parm)        tb_result=cursor.fetchall()    return tb_result#俱乐部账户存款结账def operator_cash(account_id,chance,chance_type, operator_id, note,serial_no,group_id ):    chance_desc=pm_op_type.objects.get(op_type_id=chance_type).op_type_name    #t_balance=0    if chance_type>2000:        chance = -chance    try:        t_balance=ucs_club_balance.objects.filter(inactive_time='2037-01-01')\            .filter(account_id=account_id).order_by('-id')[0].balance    except Exception as e:        t_balance = 0    if t_balance + chance >= 0:        t_balance = t_balance + chance    else:        return False    try:        t=ucs_club_balance(serial_no=serial_no,                            account_id=account_id,                            chance=chance,                            balance=t_balance,                            chance_type=chance_type,                            chance_desc=chance_desc,                            group_id=group_id,                            operator_id=operator_id,                            note=note)        t.save()    except Exception as e:        return False    return Truedef club_account_list(club_id, group_id):    with connection.cursor() as cursor:        strSQL="select a.account_id, b.type FROM sdt_ucs_club_account a, "\               "sdt_pm_account_type b "\               "where a.type_id=b.type_id "\               "and date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s "\               "and a.group_id=%s "        tmp_parm=[club_id,group_id]        cursor.execute(strSQL, tmp_parm)        tb_result=cursor.fetchall()    return tb_resultdef get_operator_accountID(club_id, group_id, type_id):    try:        account_id=ucs_club_account.objects.filter(inactive_time='2037-01-01')\            .filter(club_id=club_id).get(type_id=type_id).account_id        return account_id    except Exception as e:        return edef get_account_type_list(club_id, group_id):    with connection.cursor() as cursor:        strSQL="select b.account_desc,b.account_id from sdt_pm_account_type a, "\               "sdt_ucs_club_account b "\               "where a.type_id=b.type_id "\               "and date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037'" \               "and b.club_id=%s "\               "and b.group_id=%s "        tmp_parm = [club_id, group_id]        cursor.execute(strSQL, tmp_parm)        tb_result=cursor.fetchall()    return tb_resultdef get_club_balance_byType(account_id):    try:        type_balance = ucs_club_balance.objects.filter(inactive_time='2037-01-01')\            .filter(account_id=account_id).order_by('-id')[0].balance        return type_balance    except Exception as e:        return 0def flash(request, title, text , level='info'):    level_map = {        'info': messages.INFO,        'debug': messages.DEBUG,        'success': messages.SUCCESS,        'warning': messages.WARNING,        'error': messages.ERROR    }    level=level_map[level]    messages.add_message(request,level,text,extra_tags=title)    return 'OK'def createSerialNo(club_id, group_id, type_id):    part1=str(datetime.datetime.now().strftime('%m%d%H%M%S'))    #part2=str(datetime.datetime.now().microsecond)    part3=str(club_id)+str(group_id).zfill(3)+str(type_id)    part4=str(random.randint(0,999)).zfill(3)    serialno=part1+part3+part4    return serialnodef getUserInfoByName(user_id,club_id):    tb_result={}    try:        tb_user=ucs_subs_user.objects.filter(inactive_time='2037-01-01').get(user_id=user_id)        wx_name=tb_user.wx_name        note=tb_user.note        user_name=tb_user.user_name        #account_id=tb_user.account_id        user_id = tb_user.user_id        account_id=ucs_account.objects.filter(inactive_time='2037-01-01').filter(club_id=club_id).get(user_id=user_id).account_id        feedback_info=ucs_club_user.objects.filter(inactive_time='2037-01-01').filter(club_id=club_id).get(user_id=user_id)        feedback=feedback_info.feedback        feedback_type=feedback_info.feedback_type        with connection.cursor() as cursor:            strSQL = "select b.user_name,account_level from " \                     "sdt_ucs_account a, " \                     "sdt_ucs_subs_user b " \                     "where a.account_id=%s " \                     "and a.club_id=%s " \                     "and date_format(a.inactive_time,'%%Y')='2037' " \                     "and a.user_id=b.user_id " \                     "and date_format(b.inactive_time,'%%Y')='2037' "            tmp_parm = [account_id, club_id]            cursor.execute(strSQL, tmp_parm)            tb_tmp = cursor.fetchall()            account_list = tb_tmp #获取本俱乐部同账户玩家信息            tb_account_list=""            for t in account_list:                if t[1] == 1:                    main_account = t[0]                tb_account_list = tb_account_list + t[0] + ";"            tb_result['main_account'] = main_account            tb_result['tb_account_list'] = tb_account_list            strSQL="select b.club_name from sdt_ucs_club_user a, "\                   "sdt_ucs_subs_club b "\                   "where date_format(a.inactive_time,'%%Y')='2037' "\                   "and date_format(b.inactive_time,'%%Y')='2037' "\                   "and a.club_id=b.club_id "\                   "and a.user_id=%s "            cursor.execute(strSQL, user_id)            tb_club= cursor.fetchall()            club_list=""            for t in tb_club:                club_list=club_list + t[0] + ";"            tb_result['club_list']=club_list            tb_result['wx_name']=wx_name            tb_result['note']=note            tb_result['user_id']=user_id            tb_result['user_name']=user_name            tb_result['feedback']=round(feedback/1000,2)            tb_result['feedback_type']=feedback_type    except Exception as e:        return False    try:        remark=ucs_club_user.objects.filter(inactive_time='2037-01-01').filter(club_id=club_id).get(user_id=user_id).remark        tb_result['remark']=remark    except:        tb_result['remark'] = ""    return tb_resultdef modifyUserInfoFunc(club_id,user_id, new_name,new_wx_name,remark,feedback,feedback_type):    try:        tmp_user=ucs_subs_user.objects.filter(inactive_time='2037-01-01').get(user_id=user_id)        tmp_customer_id=tmp_user.customer_id        tmp_account_id=tmp_user.account_id        tmp_operator_id=tmp_user.operator_id        tmp_user.inactive_time=datetime.datetime.now()        tmp_user.save()        p=ucs_subs_user(user_id=user_id,                        customer_id=tmp_customer_id,                        account_id=tmp_account_id,                        user_name=new_name,                        wx_name=new_wx_name,                        operator_id=tmp_operator_id)        p.save()    except Exception as e:        return False    try:        t=ucs_club_user.objects.filter(inactive_time='2037-01-01').filter(club_id=club_id).get(user_id=user_id)        if(remark != t.remark or feedback!=t.feedback or float(feedback_type)!=t.feedback_type):            t.inactive_time=datetime.datetime.now()            t.save()            t=ucs_club_user(user_id=user_id,                            club_id=club_id,                            feedback=feedback,                            feedback_type=feedback_type,                            remark=remark)            t.save()    except Exception as e:        return False    return Truedef checkUserNameExist(user_name):    try:        ucs_subs_user.objects.filter(inactive_time='2037-01-01').get(user_name=user_name)        return False    except:        return True#玩家账户合并def userAccountMigrate(o_account_id, t_account_id,t_account_name, t_user_id, club_id, operator_id):    #主账户余额表空    t_balance=0    o_balance=0    try:        t_balance_list = ucs_balance.objects.filter(inactive_time='2037-01-01').filter(account_id=t_account_id).filter(            club_id=club_id)        t_balance = t_balance_list.order_by('-id')[0].balance    except :        t_balance=0    try:        ucs_balance.objects.filter(inactive_time='2037-01-01').filter(account_id=t_account_id).filter(            club_id=club_id).update(inactive_time=datetime.datetime.now())        o_balance_list = ucs_balance.objects.filter(inactive_time='2037-01-01').filter(                account_id=o_account_id).filter(club_id=club_id)        o_balance = o_balance_list.order_by('-id')[0].balance    except:        o_balance=0    new_balance = o_balance + t_balance    note = "由" + t_account_name + "账户并入,涉及金额" + str(round(t_balance / 1000, 2))            # 写入主账户余额    t = ucs_balance(account_id=o_account_id,                    user_id=t_user_id,                    club_id=club_id,                    balance=new_balance,                    chance=t_balance,                    type_id=3001,                    chance_desc="账户合并",                    serial_no="9999",                    operator_id=operator_id,                    note=note)    t.save()    #合并账户表    try:        t_account_list=ucs_account.objects.filter(inactive_time='2037-01-01').filter(account_id=t_account_id).filter(club_id=club_id)        for p in t_account_list:            t=ucs_account(account_id=o_account_id,                          user_id=p.user_id,                          club_id=club_id,                          account_level=2)            t.save()        ucs_account.objects.filter(inactive_time='2037-01-01').filter(club_id=club_id).filter(account_id=t_account_id).update(inactive_time=datetime.datetime.now())        return True    except Exception as e:        return Falsedef getCLubList(club_id):    with connection.cursor() as cursor:        strSQL = "select a.club_name, a.club_shortname, a.income_rate, a.insure_rate, " \                 "a.club_desc,a.active_time " \                 "from sdt_ucs_subs_club a, " \                 "sdt_ucs_club_relation b " \                 "where a.club_id=b.subs_club_id " \                 "and date_format(a.inactive_time,'%%Y')='2037' " \                 "and date_format(b.inactive_time,'%%Y')='2037' " \                 "and b.club_id=%s "        cursor.execute(strSQL, club_id)        tb_result = cursor.fetchall()    return tb_resultdef getClubListMini():    with connection.cursor() as cursor:        strSQL="select a.club_id,a.club_name from sdt_ucs_subs_club a "\               "where date_format(inactive_time,'%Y')='2037' "\               "order by a.active_time desc "        cursor.execute(strSQL)        tb_result=cursor.fetchall()    return tb_resultdef getClubInfoById(club_id):    try:        tb_result=ucs_subs_club.objects.filter(inactive_time='2037-01-01').get(club_id=club_id)        return tb_result    except Exception as e:        return Falsedef modifyClubInfo(club_id, club_name, club_shortname, club_desc, income_rate, insure_rate):    try:        tb_club=ucs_subs_club.objects.filter(inactive_time='2037-01-01').get(club_id=club_id)        tb_club.inactive_time=datetime.datetime.now()        tb_club.save()        t=ucs_subs_club(club_id=club_id.strip(),                        club_name=club_name.strip(),                        club_shortname=club_shortname.strip(),                        club_desc=club_desc.strip(),                        income_rate=income_rate.strip(),                        insure_rate=insure_rate.strip(),                        club_lever=1,                        active_time=datetime.datetime.now())        t.save()        return True    except Exception as e:        return Falsedef club_reg(club_name, club_shortname, club_desc, income_rate, insure_rate, subs_club_lever):    try:        club_id=ucs_subs_club.objects.order_by('-club_id')[0].club_id    except :        club_id=1000    new_id=club_id+1    t=ucs_subs_club(club_id=new_id,                    club_name=club_name,                    club_shortname=club_shortname,                    club_desc=club_desc,                    income_rate=income_rate,                    insure_rate=insure_rate,                    club_lever=subs_club_lever)    t.save()    result=add_union_account(new_id)    if result:        return new_id    else:        return Falsedef getFreezeSumByAid(account_id,club_id):    try:        if ucs_game_freeze_record.objects.filter(inactive_time='2037-01-01')\                .filter(club_id=club_id).filter(account_id=account_id).exists():            result=ucs_game_freeze_record.objects.filter(inactive_time='2037-01-01')\                .filter(club_id=club_id).filter(status='预占用').filter(account_id=account_id).aggregate(freeze=Sum('freeze_num'))            freeze_sum=result['freeze']            if freeze_sum==None:                freeze_sum=0            return freeze_sum        else:            return 0    except Exception as e:        return 0def setFreezeNum(account_id,user_id,freeze_num,club_id,operator_id,game_no,note,unfreeze_time):    try:        t=ucs_game_freeze_record(account_id=account_id,                                 user_id=user_id,                                 club_id=club_id,                                 freeze_num=freeze_num,                                 operator_id=operator_id,                                 active_time=now(),                                 unfreeze_time=unfreeze_time,                                 note=note,                                 game_no=game_no)        t.save()        return True    except Exception as e:        return Falsedef getFreezeListByGameNo(game_no):    with connection.cursor() as cursor:        strSQL="select concat(b.user_name,'(',d.club_shortname,')') ,round(a.freeze_num/1000,2) freeze,a.active_time,a.note  from sdt_ucs_game_freeze_record a, "\               "sdt_ucs_subs_user b, "\               "sdt_ucs_subs_club d "\               "where a.user_id=b.user_id "\               "and a.club_id=d.club_id "\               "and date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' " \               "and a.status='预占用' "\               "and a.game_no=%s " \               "order by a.active_time desc "        cursor.execute(strSQL,game_no)        tb_result=cursor.fetchall()    return tb_resultdef getFreezeListByUid(user_id,club_id):    with connection.cursor() as cursor:        strSQL="select a.game_no,round(a.freeze_num/1000,2) num, "\               "a.status, "\               "date_format(a.unfreeze_time,'%%Y-%%m-%%d %%T') un_time,a.note "\               "from sdt_ucs_game_freeze_record a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.user_id=%s "\			   "and a.club_id=%s "\	           "and a.status='预占用' "\               "order by a.active_time desc "        tmp_parm=[user_id, club_id]        cursor.execute(strSQL, tmp_parm)        tb_result=cursor.fetchall()    return tb_resultdef getFreezeListByAid(account_id,club_id):    with connection.cursor() as cursor:        strSQL="select a.game_no,round(a.freeze_num/1000,2) num, b.user_name, "\               "a.status, "\               "date_format(a.unfreeze_time,'%%Y-%%m-%%d %%T') un_time,a.note "\               "from sdt_ucs_game_freeze_record a, "\               "sdt_ucs_subs_user b "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and a.account_id=%s "\               "and a.user_id=b.user_id "\			   "and a.club_id=%s "\	           "and a.status='预占用' "\               "order by a.active_time desc "        tmp_parm=[account_id, club_id]        cursor.execute(strSQL, tmp_parm)        tb_result=cursor.fetchall()    return tb_resultdef abortGameByNo(game_no):    try:        ucs_gamerecord.objects.filter(game_no=game_no).update(status_id=4)        ucs_gamerecord.objects.filter(game_no=game_no).update(status = "终止")        ucs_gamerecord.objects.filter(game_no=game_no).update(inactive_time=datetime.datetime.now())        ucs_game_freeze_record.objects.filter(game_no=game_no).update(inactive_time=datetime.datetime.now())        return True    except Exception as e:        return Falsedef regedGameByNo(game_no):    try:        ucs_gamerecord.objects.filter(inactive_time='2037-01-01').filter(game_no=game_no).update(status_id=5,status="已登记",record_time=now())        #ucs_gamerecord.objects.filter(inactive_time='2037-01-01').filter(game_no=game_no).update(status = "已登记")        ucs_game_freeze_record.objects.filter(inactive_time='2037-01-01').filter(game_no=game_no).update(status='解冻')        return True    except Exception as e:        return False#返回除自己外俱乐部列表，用于下拉框初始化充值用def getClubListWithoutSelf(club_id):    with connection.cursor() as cursor:        strSQL="select z.club_id, y.account_id,z.club_name from ( "\               "select a.subs_club_id from sdt_ucs_club_relation a "\               "where a.club_id=%s "\               "and  date_format(a.inactive_time,'%%Y')='2037' "\               "union "\               "select a.club_id from sdt_ucs_club_relation a "\               "where a.subs_club_id=%s "\               "and date_format(a.inactive_time,'%%Y')='2037') x, "\               "sdt_ucs_union_account y, "\               "sdt_ucs_subs_club z "\               "where x.subs_club_id=y.club_id "\               "and y.club_id=z.club_id "\               "and date_format(z.inactive_time,'%%Y')='2037' "\               "and date_format(y.inactive_time,'%%Y')='2037' "        tmp_parm=[club_id, club_id]        cursor.execute(strSQL,tmp_parm)        tb_result=cursor.fetchall()    return tb_resultdef club_cash_func(operator_id,group_id,club_id,cash_num,cash_type,serial_no,note, main_club_id):    try:        op_type=pm_op_type.objects.filter(inactive_time='2037-01-01').get(op_type_id=cash_type).op_type_name    except :        return False    chance_desc=op_type    if cash_type>2000:        cash_num =-cash_num    account_id = ucs_union_account.objects.filter(inactive_time='2037-01-01').get(club_id=club_id).account_id    try:        balance=ucs_union_balance.objects.filter(inactive_time='2037-01-01').filter(main_club_id=main_club_id).filter(account_id=account_id).order_by('-id')[0].balance        balance=balance+cash_num    except:        balance=cash_num    t=ucs_union_balance(serial_no=serial_no,                        account_id=account_id,                        balance=balance,                        chance=cash_num,                        chance_type=cash_type,                        chance_desc=chance_desc,                        operator_id=operator_id,                        main_club_id=main_club_id,                        group_id=group_id,                        note=note)    t.save()    return True#联盟俱乐部账户流水清单def getUnionBalanceList(club_id, account_id):    with connection.cursor() as cursor:        strSQL="select a.account_id,round(a.chance/1000,2) chance, round(a.balance/1000,2) balance, a.chance_desc, "\               "date_format(a.update_time,'%%c/%%d %%H:%%i') update_time, "\               "b.operator_name,a.note from sdt_ucs_union_balance a , "\               "sdt_ucs_operator b "\               "where a.main_club_id=%s "\               "and a.account_id=%s "\               "and date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and a.operator_id=b.operator_id "\               "order by a.update_time desc "\               "limit 50"        tmp_parm=[club_id,account_id]        cursor.execute(strSQL, tmp_parm)        tb_result=cursor.fetchall()    return tb_resultdef getUnionBalanceListByDate(club_id, account_id,start,end):    with connection.cursor() as cursor:        strSQL="select a.account_id,round(a.chance/1000,2) chance, round(a.balance/1000,2) balance, a.chance_desc, "\               "date_format(a.update_time,'%%c/%%d %%H:%%i') update_time, "\               "b.operator_name,a.note from sdt_ucs_union_balance a , "\               "sdt_ucs_operator b "\               "where a.main_club_id=%s "\               "and a.account_id=%s "\               "and date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and a.operator_id=b.operator_id "\               "and a.update_time BETWEEN str_to_date(%s,'%%Y-%%m-%%d %%H:%%i') and str_to_date(%s,'%%Y-%%m-%%d %%H:%%i')"\               "order by a.update_time desc "        tmp_parm=[club_id,account_id,start,end]        cursor.execute(strSQL, tmp_parm)        tb_result=cursor.fetchall()    return tb_result#托管俱乐部账户流水清单def getDeveloperBalanceListByDeveloperId(club_id, developer_id):    with connection.cursor() as cursor:        strSQL="select a.developer_id,round(a.chance/1000,2) chance, round(a.balance/1000,2) balance, c.op_type_name, "\               "date_format(a.active_time,'%%c/%%d %%H:%%i') update_time, "\               "b.operator_name,a.note from sdt_ucs_developer_balance a , "\               "sdt_ucs_operator b, "\		       "sdt_pm_op_type c "\               "where a.club_id=%s "\               "and a.developer_id=%s "\               "and date_format(a.inactive_time,'%%Y')='2037' "\		       "and date_format(c.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and a.operator_id=b.operator_id "\               "and a.type_id=c.op_type_id "\               "order by a.active_time desc "        tmp_parm = [club_id, developer_id]        cursor.execute(strSQL, tmp_parm)        tb_result = cursor.fetchall()    return tb_resultdef add_union_account(club_id):    try:        account_id=ucs_union_account.objects.all().order_by('-account_id')[0].account_id        account_id=account_id+1        t=ucs_union_account(account_id=account_id,                            club_id=club_id)        t.save()        return True    except Exception as e:        return False#返回联盟间俱乐部余额列表def getUnionClubAccountList(club_id):    with connection.cursor() as cursor:        strSQL="select ap.account_id,ap.club_id,ap.club_name,ifnull(round(ac.balance/1000,2),0) balance from ( "\               "select  x.account_id,x.balance from "\               "(select a.account_id,a.update_time,a.balance from sdt_ucs_union_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037'  and a.main_club_id=%s) x, "\               "(select a.account_id,a.update_time from (select a.account_id,a.update_time from sdt_ucs_union_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037' and a.main_club_id=%s) a "\               "left join (select a.account_id,a.update_time from sdt_ucs_union_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037' and a.main_club_id=%s) b "\               "on a.account_id=b.account_id and a.update_time<=b.update_time "\               "group by a.account_id,a.update_time "\               "having count(b.account_id)=1) y "\               "where x.account_id=y.account_id "\               "and x.update_time=y.update_time "\               "order by x.account_id,x.update_time desc) ac, "\               "(select b.club_id,b.club_name,a.account_id from sdt_ucs_union_account a, "\               "sdt_ucs_subs_club b "\               "where a.club_id=b.club_id "\               "and date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037') ap "\               "where ac.account_id=ap.account_id "        tmp_param=[club_id, club_id, club_id]        cursor.execute(strSQL,tmp_param)        tb_result=cursor.fetchall()    return tb_resultdef gameResultClubReg(game_no, club_id, group_id, operator_id, seriale_no ):    with connection.cursor() as cursor:        strSQL="select y.account_id,x.club_id,x.delivery from( "\               "select a.club_id,sum(a.delivery) delivery  from sdt_ucs_result_table_l1 a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.game_no=%s "\               "group by a.club_id) x, "\               "sdt_ucs_union_account y "\               "where x.club_id=y.club_id "\               "and date_format(y.inactive_time,'%%Y')='2037' "        cursor.execute(strSQL, game_no)        tb_club_sum=cursor.fetchall()    club_l0 = ucs_subs_club.objects.filter(inactive_time='2037-01-01').get(club_lever=0).club_id    club_l0_account_id=ucs_union_account.objects.filter(inactive_time='2037-01-01').get(club_id=club_l0).account_id    note=game_no    for t in tb_club_sum:        if t[1] != club_l0:            try:                account_id=ucs_union_account.objects.filter(inactive_time='2037-01-01').get(club_id=t[1]).account_id                balance=ucs_union_balance.objects.filter(inactive_time='2037-01-01').filter(main_club_id=club_id)\                    .filter(account_id=account_id).order_by('-id')[0].balance            except :                balance=0            balance=t[2]+balance            try:                p=ucs_union_balance(serial_no=seriale_no,                                    account_id=t[0],                                    balance=balance,                                    chance=t[2],                                    chance_type=1003,                                    chance_desc='牌局结算',                                    operator_id=operator_id,                                    group_id=group_id,                                    note=note,                                    main_club_id=club_id)                p.save()            except:                return False    #写入1级俱乐部联盟账单    main_club_account_id=ucs_union_account.objects.filter(inactive_time='2037-01-01').get(club_id=club_l0).account_id    for t in tb_club_sum:        if t[1] != club_l0:            try:                #account_id = ucs_union_account.objects.filter(inactive_time='2037-01-01').get(club_id=t[1]).account_id                balance = ucs_union_balance.objects.filter(inactive_time='2037-01-01').filter(main_club_id=t[1])\                    .filter(account_id=main_club_account_id).order_by('-id')[0].balance            except:                balance=0            balance=-t[2]+balance            try:                p=ucs_union_balance(serial_no=seriale_no,                                    account_id=club_l0_account_id,                                    balance=balance,                                    chance=-t[2],                                    chance_type=1003,                                    chance_desc='牌局结算',                                    operator_id=operator_id,                                    group_id=group_id,                                    note=note,                                    main_club_id=t[1])                p.save()            except Exception as e:                return False    return True#托管俱乐部写余额表def gameDeveloperReg(game_no, operator_id, serial_no):    with connection.cursor() as cursor:        strSQL="select b.developer_id,b.club_id,sum(a.income_total) from sdt_ucs_result_table_l2 a, "\               "sdt_ucs_club_developer b "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and a.user_id=b.user_id "\               "and a.game_no=%s "\               "and a.main_club_id=b.club_id "\               "group by b.developer_id,b.club_id "        cursor.execute(strSQL, game_no)        tb_user_list = cursor.fetchall()    for t in tb_user_list:        developer_id=int(t[0])        club_id=int(t[1])        chance=int(t[2])        developer_cash(developer_id,club_id,chance,1003,operator_id,game_no,serial_no, None)    return True#玩家战绩写余额表def gameResultUserReg(game_no, operator_id,serial_no):    with connection.cursor() as cursor:        strSQL="select a.user_id,a.account_id,a.main_club_id,a.score_final from sdt_ucs_result_table_l2 a "\               "where date_format(inactive_time,'%%Y')='2037' " \               "and a.game_no=%s"        cursor.execute(strSQL, game_no)        tb_user_list=cursor.fetchall()    for t in tb_user_list:        try:            balance=ucs_balance.objects.filter(inactive_time='2037-01-01').filter(account_id=t[1]) \                .filter(club_id=t[2]).order_by('-id')[0].balance        except:            balance=0        balance=balance+t[3]        note=game_no        try:            p=ucs_balance(account_id=t[1],                          user_id=t[0],                          club_id=t[2],                          balance=balance,                          chance=t[3],                          type_id=1003,                          updatetime=now(),                          chance_desc='牌局结算',                          serial_no=serial_no,                          operator_id=operator_id,                          note=note)            p.save()        except:            return False    return Truedef getClubBalanceTotal(club_id): #返回俱乐部所有玩家余额    with connection.cursor() as cursor:        strSQL="select sum(pp.balance) from ( "\               "select  x.account_id,x.balance from (select a.account_id,a.id,a.balance from sdt_ucs_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s) x, "\               "(select a.account_id,a.id from (select a.account_id,a.id from sdt_ucs_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s) a "\               "left join (select a.account_id,a.id from sdt_ucs_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s) b "\               "on a.account_id=b.account_id and a.id<=b.id "\               "group by a.account_id,a.id "\               "having count(b.account_id)=1) y "\               "where x.account_id=y.account_id "\               "and x.id=y.id "\               "order by x.account_id,x.id desc) pp "        tmp_parm = [club_id, club_id, club_id]        cursor.execute(strSQL,tmp_parm)        tb_result=cursor.fetchall()        if tb_result[0][0] is None:            t=0        else:t=tb_result[0][0]        result=t    return float(result)#def getUnionIncomeTotal(club_id): #上交联盟总收益#    with connection.cursor() as cursor:#        strSQL="select sum(a.up_total) from sdt_ucs_result_table_l1 a, "\#               "sdt_ucs_club_relation b "\#               "where date_format(a.inactive_time,'%%Y')='2037' "\ #              "and a.club_id=b.subs_club_id " \#               "and a.flag=0 " \#               "and b.club_id=%s "\#               "and a.main_club_id=%s "#        tmp_parm=[club_id, club_id]#        cursor.execute(strSQL, tmp_parm)#        tb_result=cursor.fetchall()#    if tb_result[0][0] is None:#        t = 0#    else:#        t = tb_result[0][0]#    result = t#    return float(result)#俱乐部内上交收益def getClubUpIncomeTotal(club_id):    try:        income=ucs_result_table_l2.objects.filter(inactive_time='2037-01-01').filter(main_club_id=club_id)\            .filter(is_modify=0).filter(flag=0).aggregate(up_total=Sum('up_total'))        income=income['up_total']        if income is None:            income=0    except:        income=0    return income#联盟上交收益def getUnionUpIncomeTotal(club_id):    main_club_id=ucs_subs_club.objects.filter(inactive_time='2037-01-01').get(club_lever=0).club_id    if main_club_id==club_id:        try:            income=ucs_result_table_l1.objects.filter(inactive_time='2037-01-01').filter(main_club_id=club_id)\                .filter(is_modify=0).filter(flag=0).aggregate(up_total=Sum('up_total'))            income=income['up_total']            if income is None:                income=0        except:            income=0    else:        income=0    return income#俱乐部自身玩家收益def getSelfIncomeTotal(club_id):    try:        income=ucs_result_table_l2.objects.filter(inactive_time='2037-01-01').filter(main_club_id=club_id)\            .filter(is_modify=0).filter(flag=0).filter(club_id=club_id).aggregate(income_total=Sum('income_total'))        income = income['income_total']        if income is None:            income=0    except:        income=0    return incomedef getClubAccountTotal(club_id):  #返回俱乐部现金账户余额    with connection.cursor() as cursor:        strSQL="select  sum(x.balance) from (select a.account_id,a.id,a.balance from sdt_ucs_club_balance a , "\               "sdt_ucs_club_account b "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.account_id=b.account_id "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and b.club_id=%s) x, "\               "(select a.account_id,a.id from (select a.account_id,a.id from sdt_ucs_club_balance a , "\               "sdt_ucs_club_account b "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.account_id=b.account_id "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and b.club_id=%s) a  "\               "left join (select a.account_id,a.id from sdt_ucs_club_balance a ,"\               "sdt_ucs_club_account b "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.account_id=b.account_id "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and b.club_id=%s) b "\               "on a.account_id=b.account_id and a.id<=b.id "\               "group by a.account_id,a.id "\               "having count(b.account_id)=1) y " \               "where x.account_id=y.account_id "\               "and x.id=y.id "        tmp_parm = [club_id, club_id, club_id]        cursor.execute(strSQL,tmp_parm)        tb_result = cursor.fetchall()        if tb_result[0][0] is None:            t = 0        else:            t = tb_result[0][0]        result = t    return float(result)def getUnionBalanceTotal(club_id, club_level): #返回下级俱乐部未结款(不含托管)    with connection.cursor() as cursor:        strSQL="select  ifnull(sum(x.balance),0) balance from "\               "(select a.account_id,a.id,a.balance from sdt_ucs_union_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037'  and a.main_club_id=%s) x, "\               "(select a.account_id,a.id from (select a.account_id,a.id from sdt_ucs_union_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037' and a.main_club_id=%s) a "\               "left join (select a.account_id,a.id from sdt_ucs_union_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037' and a.main_club_id=%s) b "\               "on a.account_id=b.account_id and a.id<=b.id "\               "group by a.account_id,a.id "\               "having count(b.account_id)=1) y "\               "where x.account_id=y.account_id "\               "and x.id=y.id "\               "order by x.account_id,x.id desc "        tmp_parm = [club_id, club_id, club_id]        cursor.execute(strSQL, tmp_parm)        tb_result=cursor.fetchall()        if tb_result[0][0] is None:            t = 0        else:            t = tb_result[0][0]        result = t    return float(result)def getClubIncomeTotal(club_id, club_level): #本俱乐部水钱保险总收益    if club_level==0:        main_club_id=club_id    else:        main_club_id=ucs_club_relation.objects.filter(inactive_time='2037-01-01').get(subs_club_id=club_id).club_id    #table_name="sdt_ucs_result_table_l" + str(club_level+1)    table_name="sdt_ucs_result_table_l1"    with connection.cursor() as cursor:        strSQL="select sum(a.income_total) from " + table_name + " a "\               "where date_format(a.inactive_time,'%%Y')='2037' " \               "and a.flag=0 " \               "and a.club_id=%s "\               "and a.main_club_id=%s "        tmp_parm=[club_id,main_club_id]        cursor.execute(strSQL, tmp_parm)        tb_result = cursor.fetchall()        if tb_result[0][0] is None:            t = 0        else:            t = tb_result[0][0]        result = t    return float(result)def getClubUserBalanceByType(club_id):    result={}    with connection.cursor() as cursor:        strSQL="select ifnull(sum(x.balance),0) balance,count(*) cnt from (select a.user_id,a.account_id,a.id,a.balance from sdt_ucs_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s "\               "and a.user_id not in "\               "(select b.user_id from sdt_ucs_club_developer b "\               "where date_format(b.inactive_time,'%%Y')='2037' "\               "and b.club_id=%s)) x, "\               "(select a.account_id,a.id from (select a.account_id,a.id from sdt_ucs_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s) a "\               "left join (select a.account_id,a.id from sdt_ucs_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s) b "\               "on a.account_id=b.account_id and a.id<=b.id "\               "group by a.account_id,a.id "\               "having count(b.account_id)=1) y "\               "where x.account_id=y.account_id "\               "and x.id=y.id "\               "and x.balance>0 "        tmp_parm = [club_id, club_id, club_id,club_id]        cursor.execute(strSQL,tmp_parm)        tb_result = cursor.fetchall()        for t in tb_result:            result['userplus']=float(round(t[0]/1000,2))            result['userpluscnt']=t[1]        user_plus=tb_result[0][0]        strSQL="select ifnull(sum(x.balance),0) balance,count(*) cnt from (select a.user_id,a.account_id,a.id,a.balance from sdt_ucs_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s "\               "and a.user_id not in "\               "(select b.user_id from sdt_ucs_club_developer b "\               "where date_format(b.inactive_time,'%%Y')='2037' "\               "and b.club_id=%s)) x, "\               "(select a.account_id,a.id from (select a.account_id,a.id from sdt_ucs_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s) a "\               "left join (select a.account_id,a.id from sdt_ucs_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s) b "\               "on a.account_id=b.account_id and a.id<=b.id "\               "group by a.account_id,a.id "\               "having count(b.account_id)=1) y "\               "where x.account_id=y.account_id "\               "and x.id=y.id  "\               "and x.balance<0 "        tmp_parm = [club_id, club_id, club_id,club_id]        cursor.execute(strSQL,tmp_parm)        tb_result = cursor.fetchall()        for t in tb_result:            result['userminus']=float(round(t[0]/1000,2))            result['userminuscnt']=t[1]        user_minus=tb_result[0][0]        balance=round((user_plus+user_minus)/1000,2)        result['userbalance']=balance        result['cnt']=result['userpluscnt']+result['userminuscnt']    #取托管正余额玩家        strSQL="select ifnull(sum(x.balance),0) balance,count(*) cnt from (select a.user_id,a.account_id,a.id,a.balance from sdt_ucs_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s "\               "and a.user_id in "\               "(select b.user_id from sdt_ucs_club_developer b "\               "where date_format(b.inactive_time,'%%Y')='2037' "\               "and b.club_id=%s)) x, "\               "(select a.account_id,a.id from (select a.account_id,a.id from sdt_ucs_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s) a "\               "left join (select a.account_id,a.id from sdt_ucs_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s) b "\               "on a.account_id=b.account_id and a.id<=b.id "\               "group by a.account_id,a.id "\               "having count(b.account_id)=1) y "\               "where x.account_id=y.account_id "\               "and x.id=y.id  "\               "and x.balance>0 "        tmp_parm = [club_id, club_id, club_id,club_id]        cursor.execute(strSQL,tmp_parm)        tb_result = cursor.fetchall()        for t in tb_result:            result['developer_plus']=float(round(t[0]/1000,2))            result['developer_plus_cnt']=t[1]        developer_plus=tb_result[0][0]        # 取托管负余额玩家        strSQL = "select ifnull(sum(x.balance),0) balance,count(*) cnt from (select a.user_id,a.account_id,a.id,a.balance from sdt_ucs_balance a " \                 "where date_format(a.inactive_time,'%%Y')='2037' " \                 "and a.club_id=%s " \                 "and a.user_id in " \                 "(select b.user_id from sdt_ucs_club_developer b " \                 "where date_format(b.inactive_time,'%%Y')='2037' " \                 "and b.club_id=%s)) x, " \                 "(select a.account_id,a.id from (select a.account_id,a.id from sdt_ucs_balance a " \                 "where date_format(a.inactive_time,'%%Y')='2037' " \                 "and a.club_id=%s) a " \                 "left join (select a.account_id,a.id from sdt_ucs_balance a " \                 "where date_format(a.inactive_time,'%%Y')='2037' " \                 "and a.club_id=%s) b " \                 "on a.account_id=b.account_id and a.id<=b.id " \                 "group by a.account_id,a.id " \                 "having count(b.account_id)=1) y " \                 "where x.account_id=y.account_id " \                 "and x.id=y.id  " \                 "and x.balance<0 "        tmp_parm = [club_id, club_id, club_id, club_id]        cursor.execute(strSQL, tmp_parm)        tb_result = cursor.fetchall()        for t in tb_result:            result['developer_minus'] = float(round(t[0] / 1000, 2))            result['developer_minus_cnt'] = t[1]        developer_minus = tb_result[0][0]        ucs_developer_balance=round((developer_plus+developer_minus)/1000,2)        result['developer_balance']=ucs_developer_balance        result['developer_cnt']=result['developer_plus_cnt']+result['developer_minus_cnt']        result['total_balance']=result['developer_balance']+result['userbalance']    return resultdef getUnionBalanceByType(club_id):    result={}    with connection.cursor() as cursor:        strSQL="select  ifnull(sum(x.balance),0) balance,count(*) cnt from "\               "(select a.account_id,a.update_time,a.balance from sdt_ucs_union_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037'  and a.main_club_id=%s) x, "\               "(select a.account_id,a.update_time from (select a.account_id,a.update_time from sdt_ucs_union_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037' and a.main_club_id=%s) a "\               "left join (select a.account_id,a.update_time from sdt_ucs_union_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037' and a.main_club_id=%s) b "\               "on a.account_id=b.account_id and a.update_time<=b.update_time "\               "group by a.account_id,a.update_time "\               "having count(b.account_id)=1) y "\               "where x.account_id=y.account_id "\               "and x.update_time=y.update_time "\               "and x.balance>0 "        tmp_parm=[club_id, club_id, club_id]        cursor.execute(strSQL,tmp_parm)        tb_result=cursor.fetchall()        for t in tb_result:            result['clubplus']=float(round(t[0]/1000,2))            result['pluscnt']=t[1]        club_plus=tb_result[0][0]        strSQL="select  ifnull(sum(x.balance),0) balance,count(*) cnt from "\               "(select a.account_id,a.update_time,a.balance from sdt_ucs_union_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037'  and a.main_club_id=%s) x, "\               "(select a.account_id,a.update_time from (select a.account_id,a.update_time from sdt_ucs_union_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037' and a.main_club_id=%s) a "\               "left join (select a.account_id,a.update_time from sdt_ucs_union_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037' and a.main_club_id=%s) b "\               "on a.account_id=b.account_id and a.update_time<=b.update_time "\               "group by a.account_id,a.update_time "\               "having count(b.account_id)=1) y "\               "where x.account_id=y.account_id "\               "and x.update_time=y.update_time "\               "and x.balance<0 "        tmp_parm = [club_id, club_id, club_id]        cursor.execute(strSQL,tmp_parm)        tb_result=cursor.fetchall()        for t in tb_result:            result['clubminus'] = float(round(t[0] / 1000, 2))            result['minuscnt']=t[1]        club_minus=tb_result[0][0]        club_balance=round((club_plus+club_minus)/1000,2)        result['clubbalance']=club_balance        result['cnt']=result['minuscnt'] + result['pluscnt']    #取托管俱乐部正余额账户        strSQL="select  ifnull(sum(x.balance),0) balance,count(*) cnt from "\               "(select a.developer_id,a.active_time,a.balance from sdt_ucs_developer_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037'  and a.club_id=%s) x, "\               "(select a.developer_id,a.active_time from (select a.developer_id,a.active_time from sdt_ucs_developer_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037' and a.club_id=%s) a "\               "left join (select a.developer_id,a.active_time from sdt_ucs_developer_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037' and a.club_id=%s) b "\               "on a.developer_id=b.developer_id and a.active_time<=b.active_time "\               "group by a.developer_id,a.active_time "\               "having count(b.developer_id)=1) y "\               "where x.developer_id=y.developer_id "\               "and x.active_time=y.active_time "\               "and x.balance>0 "        tmp_parm = [club_id, club_id, club_id]        cursor.execute(strSQL,tmp_parm)        tb_result=cursor.fetchall()        for t in tb_result:            result['developer_plus'] = float(round(t[0] / 1000, 2))            result['developer_plus_cnt']=t[1]        developer_plus=tb_result[0][0]    # 取托管俱乐部负余额账户        strSQL="select  ifnull(sum(x.balance),0) balance,count(*) cnt from "\               "(select a.developer_id,a.active_time,a.balance from sdt_ucs_developer_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037'  and a.club_id=%s) x, "\               "(select a.developer_id,a.active_time from (select a.developer_id,a.active_time from sdt_ucs_developer_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037' and a.club_id=%s) a "\               "left join (select a.developer_id,a.active_time from sdt_ucs_developer_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037' and a.club_id=%s) b "\               "on a.developer_id=b.developer_id and a.active_time<=b.active_time "\               "group by a.developer_id,a.active_time "\               "having count(b.developer_id)=1) y "\               "where x.developer_id=y.developer_id "\               "and x.active_time=y.active_time "\               "and x.balance<0 "        tmp_parm = [club_id, club_id, club_id]        cursor.execute(strSQL,tmp_parm)        tb_result=cursor.fetchall()        for t in tb_result:            result['developer_minus'] = float(round(t[0] / 1000, 2))            result['developer_minus_cnt']=t[1]        developer_minus=tb_result[0][0]        result['developer_balance']=round((developer_plus+developer_minus)/1000,2)        result['developer_cnt']=result['developer_plus_cnt']+result['developer_minus_cnt']        result['total_balance']=result['clubbalance']+result['developer_balance']    return result'''def getClubIncomeByType(club_id, club_level):    result={}    if club_level==0:        main_club_id=club_id    else:        main_club_id=ucs_club_relation.objects.filter(inactive_time='2037-01-01').get(subs_club_id=club_id).club_id    #table_name="sdt_ucs_result_table_l" + str(club_level+1)    table_name="sdt_ucs_result_table_l1"    with connection.cursor() as cursor:        strSQL="select ifnull(sum(a.income_water),0) water, "\               "ifnull(sum(a.income_insure),0) insure, "\               "ifnull(sum(a.income_total),0) total from " + table_name + " a " \               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.flag=0 "\               "and a.club_id=%s " \               "and a.main_club_id=%s "        tmp_parm=[club_id, main_club_id]        cursor.execute(strSQL, tmp_parm)        tb_result=cursor.fetchall()        for t in tb_result:            result['water']=float(round(t[0]/1000,2))            result['insure']=float(round(t[1]/1000,2))            result['total']=float(round(t[2]/1000,2))        strSQL="select ifnull(sum(a.waterup),0) water, "\               "ifnull(sum(a.insure_up),0) insure, "\               "ifnull(sum(a.up_total),0) total from " + table_name + " a , "\               "sdt_ucs_club_relation b "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and a.club_id=b.subs_club_id "\               "and a.flag=0 "\               "and b.club_id=%s " \               "and a.main_club_id=%s "        tmp_parm = [club_id, main_club_id]        cursor.execute(strSQL, tmp_parm)        tb_result=cursor.fetchall()        for t in tb_result:            result['up_water']=float(round(t[0]/1000,2))            result['up_insure']=float(round(t[1]/1000,2))            result['up_total']=float(round(t[2]/1000,2))    return result'''def getClubIncomeByType(club_id, club_level):    result={}    if club_level==0:        main_club_id=club_id    else:        main_club_id=ucs_club_relation.objects.filter(inactive_time='2037-01-01').get(subs_club_id=club_id).club_id    #table_name="sdt_ucs_result_table_l" + str(club_level+1)    #取自有玩家收入    with connection.cursor() as cursor:        table_name = "sdt_ucs_result_table_l2"        strSQL="select ifnull(sum(a.income_water),0) water, "\               "ifnull(sum(a.income_insure),0) insure, "\               "ifnull(sum(a.income_total),0) total from " + table_name + " a " \               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.flag=0 "\               "and a.club_id=%s " \               "and a.main_club_id=%s "\               "and a.is_modify=0 "        tmp_parm=[club_id, club_id]        cursor.execute(strSQL, tmp_parm)        tb_result=cursor.fetchall()        for t in tb_result:            result['water']=float(round(t[0]/1000,2))            result['insure']=float(round(t[1]/1000,2))            result['total']=float(round(t[2]/1000,2))        self_water=tb_result[0][0]        self_insure=tb_result[0][1]        self_total = tb_result[0][2]        #取托管上交收入        strSQL="select ifnull(sum(a.waterup),0) waterup, "\               "ifnull(sum(a.insure_up),0) insure_up, "\               "ifnull(sum(a.up_total),0) up_total from " + table_name + " a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.flag=0 "\               "and a.club_id is null "\               "and a.main_club_id=%s "\               "and a.is_modify=0 "        cursor.execute(strSQL, club_id)        tb_result=cursor.fetchall()        for t in tb_result:            result['developer_up_water']=float(round(t[0]/1000,2))            result['developer_up_insure'] = float(round(t[1] / 1000, 2))            result['developer_up_total'] = float(round(t[2] / 1000, 2))        developer_water=tb_result[0][0]        developer_insure = tb_result[0][1]        developer_total=tb_result[0][2]        # 取下级俱乐部上交收入        strSQL = "select ifnull(sum(a.waterup),0) waterup, " \                 "ifnull(sum(a.insure_up),0) insure_up, " \                 "ifnull(sum(a.up_total),0) up_total from " + table_name + " a " \                 "where date_format(a.inactive_time,'%%Y')='2037' " \                 "and a.flag=0 " \                 "and a.developer_id is null " \                 "and a.main_club_id=%s " \                 "and a.is_modify=0 "        cursor.execute(strSQL, club_id)        tb_result=cursor.fetchall()        for t in tb_result:            result['l2_up_water']=float(round(t[0]/1000,2))            result['l2_up_insure'] = float(round(t[1] / 1000, 2))            result['l2_up_total'] = float(round(t[2] / 1000, 2))        l2_up_water=tb_result[0][0]        l2_up_insure = tb_result[0][1]        l2_up_total=tb_result[0][2]         #取联盟间上交收入        table_name = "sdt_ucs_result_table_l1"        strSQL="select ifnull(sum(a.waterup),0) water, "\               "ifnull(sum(a.insure_up),0) insure, "\               "ifnull(sum(a.up_total),0) total from " + table_name + " a , "\               "sdt_ucs_club_relation b "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and a.club_id=b.subs_club_id "\               "and a.flag=0 "\               "and b.club_id=%s " \               "and a.main_club_id=%s "        tmp_parm = [club_id, main_club_id]        cursor.execute(strSQL, tmp_parm)        tb_result=cursor.fetchall()        for t in tb_result:            result['up_water']=float(round(t[0]/1000,2))            result['up_insure']=float(round(t[1]/1000,2))            result['up_total']=float(round(t[2]/1000,2))        up_water=tb_result[0][0]        up_insure=tb_result[0][1]        up_total=tb_result[0][2]        result['total_water']=round((self_water+developer_water+up_water+l2_up_water)/1000,2)        result['total_insure']=round((self_insure+developer_insure+up_insure+l2_up_insure)/1000,2)        result['total_total']=round((self_total+developer_total+up_total+l2_up_total)/1000,2)        result['up_water_income']=round((developer_water+l2_up_water+up_water)/1000,2)        result['up_insure_income']=round((l2_up_insure+developer_insure+up_insure)/1000,2)        result['up_total_income']=round((developer_total+up_total+l2_up_total)/1000,2)    return resultdef getClubAccountBalanceByType(club_id):    with connection.cursor() as cursor:        strSQL="select tb_type.group_name,tb_type.account_desc,round(ifnull(tb_balance.balance/1000,0),2) balance from ( "\               "select  x.account_id,x.balance from (select a.account_id,a.id,a.balance from sdt_ucs_club_balance a , "\               "sdt_ucs_club_account b "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.account_id=b.account_id "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and b.club_id=%s) x, "\               "(select a.account_id,a.id from (select a.account_id,a.id from sdt_ucs_club_balance a , "\               "sdt_ucs_club_account b "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.account_id=b.account_id "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and b.club_id=%s) a "\               "left join (select a.account_id,a.id from sdt_ucs_club_balance a , "\               "sdt_ucs_club_account b "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.account_id=b.account_id "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and b.club_id=%s) b "\               "on a.account_id=b.account_id and a.id<=b.id "\               "group by a.account_id,a.id "\               "having count(b.account_id)=1) y "\               "where x.account_id=y.account_id "\               "and x.id=y.id) tb_balance right join "\               "(select c.account_id,d.type_id,b.group_id,b.group_name,d.type,c.account_desc from sdt_ucs_operator_group b, "\               "sdt_ucs_club_account c, "\               "sdt_pm_account_type d "\               "where date_format(b.inactive_time,'%%Y')='2037' "\               "and date_format(c.inactive_time,'%%Y')='2037' "\               "and date_format(d.inactive_time,'%%Y')='2037' "\               "and b.club_id=c.club_id "\               "and b.group_id=c.group_id "\               "and c.type_id=d.type_id "\               "and b.club_id=%s) tb_type on tb_balance.account_id=tb_type.account_id "\               "order by tb_type.group_name,tb_type.type_id asc "        tmp_parm = [club_id, club_id, club_id, club_id]        cursor.execute(strSQL, tmp_parm)        tb_result = cursor.fetchall()    return tb_result#一级战绩详单def getResultDetailByGameno(game_no,club_id):    with connection.cursor() as cursor:        strSQl="select a.user_name,round(a.score/1000,2),round(a.score_final/1000,2)," \               "round(a.income_water/1000,2),round(a.income_insure/1000,2), "\               "round(a.income_total/1000,2),round(a.up_total/1000,2),round(a.delivery/1000,2), "\               "a.is_modify "\               "from sdt_ucs_result_table_l1 a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s "\               "and a.game_no=%s "\               "and a.is_modify in (0,1) "        tmp_parm = [club_id, game_no]        cursor.execute(strSQl,tmp_parm)        tb_result=cursor.fetchall()        strSQl="select round(sum(a.score)/1000,2) score,round(sum(a.score_final)/1000,2) score_final, "\               "round(sum(a.income_water)/1000,2) income_water,round(sum(a.income_insure)/1000,2) income_insure, "\               "round(sum(a.income_total)/1000,2) income_total,round(sum(a.up_total)/1000,2) up_total, "\               "round(sum(a.delivery)/1000,2) delivery "\               "from sdt_ucs_result_table_l1 a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s "\               "and a.game_no=%s "\               "and a.is_modify=0 "        tmp_parm = [club_id, game_no]        cursor.execute(strSQl,tmp_parm)        tb_sum=cursor.fetchall()        result={}        club_name=ucs_subs_club.objects.filter(inactive_time='2037-01-01').get(club_id=club_id).club_name        result['club_name']=club_name        result['game_no']=game_no        result['detail']=tb_result        result['sum']=tb_sum    return result#二级战绩详单def getResultDetailL2ByGameno(game_no,main_club_id,club_id):#下级俱乐部含自身    with connection.cursor() as cursor:        strSQl="select a.user_name,round(a.score/1000,2),round(a.score_final/1000,2)," \               "round(a.income_water/1000,2),round(a.income_insure/1000,2), "\               "round(a.feedback/1000,2) feedback, "\               "round(a.income_total/1000,2),round(a.up_total/1000,2),round(a.delivery/1000,2), "\               "a.is_modify "\               "from sdt_ucs_result_table_l2 a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.main_club_id=%s "\               "and a.club_id=%s "\               "and a.game_no=%s "\               "and a.is_modify in (0,1) "        tmp_parm = [main_club_id,club_id, game_no]        cursor.execute(strSQl,tmp_parm)        tb_result=cursor.fetchall()        strSQl="select round(sum(a.score)/1000,2) score,round(sum(a.score_final)/1000,2) score_final, "\               "round(sum(a.income_water)/1000,2) income_water,round(sum(a.income_insure)/1000,2) income_insure, "\               "round(sum(a.feedback)/1000,2) feedback ,"\               "round(sum(a.income_total)/1000,2) income_total,round(sum(a.up_total)/1000,2) up_total, "\               "round(sum(a.delivery)/1000,2) delivery "\               "from sdt_ucs_result_table_l2 a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.main_club_id=%s "\               "and a.club_id=%s "\               "and a.game_no=%s "\               "and a.is_modify=0 "        tmp_parm = [main_club_id,club_id, game_no]        cursor.execute(strSQl,tmp_parm)        tb_sum=cursor.fetchall()        result={}        club_name=ucs_subs_club.objects.filter(inactive_time='2037-01-01').get(club_id=club_id).club_name        result['club_name']=club_name        result['game_no']=game_no        result['detail']=tb_result        result['sum']=tb_sum    return resultdef getResultDetailDeveloperL2ByGameno(game_no,main_club_id,developer_id):    result = {}    with connection.cursor() as cursor:        strSQl = "select a.user_name,round(a.score/1000,2),round(a.score_final/1000,2), " \                 "round(a.income_water/1000,2),round(a.income_insure/1000,2), " \                 "round(a.feedback/1000,2) feedback, "\                 "round(a.income_total/1000,2),round(a.up_total/1000,2),round(a.delivery/1000,2), " \                 "a.is_modify " \                 "from sdt_ucs_result_table_l2 a, " \                 "sdt_ucs_developer b " \                 "where date_format(a.inactive_time,'%%Y')='2037' " \                 "and date_format(b.inactive_time,'%%Y')='2037' " \                 "and a.developer_id=b.developer_id " \                 "and b.club_id=main_club_id " \                 "and a.developer_id=%s "\                 "and a.main_club_id=%s " \                 "and a.game_no=%s " \                 "and a.is_modify in (0,1) "        tmp_parm = [developer_id,main_club_id, game_no]        cursor.execute(strSQl, tmp_parm)        tb_result = cursor.fetchall()        result['tb_developer'] = tb_result        strSQl = "select sum(round(a.score/1000,2)), " \                 "sum(round(a.score_final/1000,2)), " \                 "sum(round(a.income_water/1000,2)), " \                 "sum(round(a.income_insure/1000,2)), " \                 "sum(round(a.feedback/1000,2)), "\                 "sum(round(a.income_total/1000,2)), " \                 "sum(round(a.up_total/1000,2)), " \                 "sum(round(a.delivery/1000,2)) " \                 "from sdt_ucs_result_table_l2 a, " \                 "sdt_ucs_developer b " \                 "where date_format(a.inactive_time,'%%Y')='2037' " \                 "and date_format(b.inactive_time,'%%Y')='2037' " \                 "and a.developer_id=b.developer_id " \                 "and b.club_id=main_club_id " \                 "and a.main_club_id=%s " \                 "and a.developer_id=%s " \                 "and a.game_no=%s " \                 "and a.is_modify=0 "        tmp_parm = [main_club_id, developer_id, game_no]        cursor.execute(strSQl, tmp_parm)        tb_sum = cursor.fetchall()        # 托管俱乐部        result['tb_developer_sum'] = tb_sum        developer_name = ucs_developer.objects.filter(inactive_time='2037-01-01').filter(club_id=main_club_id) \            .get(developer_id=developer_id).developer_name        result['developer_name'] = developer_name        result['developer_game_no']=game_no    return resultdef getClubBalanceByGroup(account_id):    with connection.cursor() as cursor:        strSQL="select a.id,b.group_name,e.type,a.serial_no,round(a.balance/1000,2),round(a.chance/1000,2)," \               "a.chance_desc,a.update_time,c.operator_name,a.note "\               "from sdt_ucs_club_balance a, "\               "sdt_ucs_operator_group b, "\               "sdt_ucs_operator c, "\               "sdt_ucs_club_account d, "\               "sdt_pm_account_type e "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and date_format(c.inactive_time,'%%Y')='2037' "\               "and date_format(d.inactive_time,'%%Y')='2037' "\               "and date_format(e.inactive_time,'%%Y')='2037' "\               "and a.operator_id=c.operator_id "\               "and a.account_id=d.account_id "\               "and d.type_id=e.type_id "\               "and a.account_id=%s "\               "and b.group_id=c.group_id "\               "order by a.id desc "        cursor.execute(strSQL, account_id)        tb_result=cursor.fetchall()    return tb_resultdef getGroupAccountFunc(club_id, group_id):    with connection.cursor() as cursor:        strSQL="select b.account_id,CONCAT(a.group_name,b.account_desc) name from sdt_ucs_operator_group a, "\               "sdt_ucs_club_account b, "\               "sdt_pm_account_type c "\               "where a.club_id=b.club_id "\               "and a.group_id=b.group_id "\               "and b.type_id=c.type_id "\               "and DATE_FORMAT(a.inactive_time,'%%Y')='2037' "\               "and DATE_FORMAT(b.inactive_time,'%%Y')='2037' "\               "and DATE_FORMAT(c.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s "\               "and a.group_id=%s "        tmp_parm = [club_id, group_id]        cursor.execute(strSQL, tmp_parm)        tb_result=cursor.fetchall()        result={}        for t in tb_result:            result[t[0]]=t[1]    return resultdef getGroupAccountFullList(club_id):    with connection.cursor() as cursor:        strSQL="select c.account_id,b.group_name,a.type,c.account_desc from sdt_pm_account_type a, "\               "sdt_ucs_operator_group b, "\               "sdt_ucs_club_account c "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and date_format(c.inactive_time,'%%Y')='2037' "\               "and a.type_id=c.type_id "\               "and c.group_id=b.group_id "\               "and c.club_id=%s "\               "order by b.group_name asc, a.type asc "        cursor.execute(strSQL, club_id)        tb_result=cursor.fetchall()    return tb_resultdef getGroupAccountList(club_id, group_id):    with connection.cursor() as cursor:        strSQL="select b.account_id,CONCAT(a.group_name,b.account_desc) name from sdt_ucs_operator_group a, "\               "sdt_ucs_club_account b, "\               "sdt_pm_account_type c "\               "where a.club_id=b.club_id "\               "and a.group_id=b.group_id "\               "and b.type_id=c.type_id "\               "and DATE_FORMAT(a.inactive_time,'%%Y')='2037' "\               "and DATE_FORMAT(b.inactive_time,'%%Y')='2037' "\               "and DATE_FORMAT(c.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s "\               "and a.group_id=%s "        tmp_parm = [club_id, group_id]        cursor.execute(strSQL, tmp_parm)        tb_result=cursor.fetchall()    return tb_result#公司账户操作def companyCashFunc(club_id,op_account_id, chance, op_type_id, operator_id, serial_no, note):    if op_account_id=='':        op_account_id=None    if op_type_id>2000:        chance_num=-chance    else:        chance_num=chance    try:        balance=ucs_company_balance.objects.filter(inactive_time='2037-01-01').filter(club_id=club_id).order_by('-active_time')[0].balance    except:        balance=0    #写入公司流水表    t=ucs_company_balance(club_id=club_id,                          op_account_id=op_account_id,                          serial_no=serial_no,                          balance=balance+chance_num,                          chance=chance_num,                          op_type_id=op_type_id,                          operator_id=operator_id,                          note=note                          )    t.save()    return Truedef getCompanyBalanceList(club_id):    with connection.cursor() as cursor:        strSQL="select a.serial_no, a.type,a.balance,a.chance,d.name,a.operator_name,a.active_time,a.note "\               "from (SELECT a.serial_no,b.type,round(a.balance/1000,2) balance, round(a.chance/1000,2) chance, "\               "c.operator_name,a.active_time,a.note  ,a.op_account_id "\               "from sdt_ucs_company_balance a, "\               "sdt_pm_company_type b, "\               "sdt_ucs_operator c "\               "where DATE_FORMAT(a.inactive_time,'%%Y')='2037' "\               "and DATE_FORMAT(b.inactive_time,'%%Y')='2037' "\               "and DATE_FORMAT(c.inactive_time,'%%Y')='2037' "\               "and a.op_type_id=b.type_id "\               "and a.operator_id=c.operator_id "\               "and a.club_id=%s) a left join "\               "(select b.account_id,CONCAT(a.group_name,c.type) name from sdt_ucs_operator_group a, "\               "sdt_ucs_club_account b, "\               "sdt_pm_account_type c "\               "where a.club_id=b.club_id "\               "and a.group_id=b.group_id "\               "and b.type_id=c.type_id "\               "and a.club_id=%s "\               "and DATE_FORMAT(a.inactive_time,'%%Y')='2037' "\               "and DATE_FORMAT(b.inactive_time,'%%Y')='2037' "\               "and DATE_FORMAT(c.inactive_time,'%%Y')='2037') d "\			   "on a.op_account_id=d.account_id " \               "order by a.active_time desc "        tmp_parm=[club_id, club_id]        cursor.execute(strSQL,tmp_parm)        tb_result=cursor.fetchall()    return tb_resultdef getCompanyBalanceSum(club_id):    with connection.cursor() as cursor:        strSQL="select ifnull(sum(chance),0) chance "\               "from sdt_ucs_company_balance a "\               "where DATE_FORMAT(a.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s "\               "and a.op_type_id>2000 "        cursor.execute(strSQL,club_id)        sum_out=cursor.fetchall()        strSQL="select ifnull(sum(chance),0) chance "\               "from sdt_ucs_company_balance a "\               "where DATE_FORMAT(a.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s "\               "and a.op_type_id>1000 "\               "and a.op_type_id<2000"        cursor.execute(strSQL, club_id)        sum_in = cursor.fetchall()        sum_out=float(sum_out[0][0])        sum_in=float(sum_in[0][0])        total=sum_in+sum_out        result=[sum_out, sum_in, total]    return resultdef getCorrectUserList(club_id, operator_id):    with connection.cursor() as cursor:        strSQL="select a.serial_no,round(a.chance/1000,2) chance,round(a.balance/1000,2) balance, "\               "c.user_name,a.type_id,a.chance_desc, "\               "a.updatetime,d.operator_name,a.note "\               "from sdt_ucs_balance a, "\               "sdt_pm_op_type b, "\               "sdt_ucs_subs_user c, "\               "sdt_ucs_operator d "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and date_format(c.inactive_time,'%%Y')='2037' "\               "and date_format(d.inactive_time,'%%Y')='2037' "\               "and a.type_id=b.op_type_id "\               "and a.user_id=c.user_id "\               "and a.operator_id=d.operator_id "\               "and a.type_id<>1003 " \               "and a.club_id=%s "\               "and a.operator_id=%s "\               "order by a.updatetime desc "        tmp_parm=[club_id, operator_id]        cursor.execute(strSQL, tmp_parm)        tb_result=cursor.fetchall()    return tb_resultdef correctUserFunc(serial_no,new_serial_no, note, operator_id):    try:        tb_list= ucs_balance.objects.filter(inactive_time='2037-01-01').get(serial_no=serial_no)        account_id=tb_list.account_id        try:            balance=ucs_balance.objects.filter(inactive_time='2037-01-01').filter(account_id=account_id).order_by('-id')[0].balance        except:            balance=0        user_id=tb_list.user_id        club_id=tb_list.club_id        chance=tb_list.chance        chance=-chance        balance=balance+chance        t=ucs_balance(account_id=account_id,                      user_id=user_id,                      club_id=club_id,                      balance=balance,                      chance=chance,                      chance_desc="客服冲正",                      serial_no=new_serial_no,                      operator_id=operator_id,                      note=note,                      type_id=1002)        t.save()        return True    except Exception as e:        return Falsedef correctBalanceFunc(serial_no,new_serial_no, note, operator_id,group_id):    try:        tb_list= ucs_club_balance.objects.filter(inactive_time='2037-01-01').get(serial_no=serial_no)        account_id = tb_list.account_id        try:            balance=ucs_club_balance.objects.filter(inactive_time='2037-01-01').filter(account_id=account_id).order_by('-id')[0].balance        except:            balance=0        chance=tb_list.chance        chance=-chance        balance=balance+chance        t=ucs_club_balance(serial_no=new_serial_no,                           account_id=account_id,                           balance=balance,                           chance=chance,                           chance_type=1002,                           chance_desc="客服冲正",                           operator_id=operator_id,                           group_id=group_id,                           note=note)        t.save()        return True    except Exception as e:        return Falsedef correctCompany(serial_no,new_serial_no,operator_id,club_id):    try:        tb_list=ucs_company_balance.objects.filter(inactive_time='2037-01-01').get(serial_no=serial_no)        balance=ucs_company_balance.objects.filter(inactive_time='2037-01-01').filter(club_id=club_id).order_by('-id')[0].balance        chance=tb_list.chance        balance=balance-chance        op_account_id=tb_list.op_account_id        t=ucs_company_balance(serial_no=new_serial_no,                              club_id=club_id,                              balance=balance,                              chance=-chance,                              op_type_id=1008,                              operator_id=operator_id,                              note=serial_no+'冲正',                              op_account_id=op_account_id)        t.save()        return True    except:        return Falsedef getCorrectClubList(club_id, operator_id):    with connection.cursor() as cursor:        strSQL="select a.serial_no,round(a.chance/1000,2) chance,round(a.balance/1000,2) balance, "\               "c.club_name,a.chance_type,a.chance_desc,a.update_time,d.operator_name,a.note from sdt_ucs_union_balance a, "\               "sdt_ucs_union_account b, "\               "sdt_ucs_subs_club c, "\               "sdt_ucs_operator d "\               "where a.account_id=b.account_id "\               "and date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and date_format(c.inactive_time,'%%Y')='2037' "\               "and date_format(d.inactive_time,'%%Y')='2037' "\               "and b.club_id=c.club_id "\               "and a.operator_id=d.operator_id "\               "and a.main_club_id=%s "\               "and a.operator_id=%s "\               "order by a.update_time desc"        tmp_parm=[club_id, operator_id]        cursor.execute(strSQL, tmp_parm)        tb_result=cursor.fetchall()    return tb_resultdef getCorrectDeveloperList(club_id,operator_id):    with connection.cursor() as cursor:        strSQL="select a.serial_no,round(a.chance/1000,2),round(a.balance/1000,2),b.developer_name, "\               "c.op_type_name,a.active_time,d.operator_name,a.note from sdt_ucs_developer_balance a, "\               "sdt_ucs_developer b, "\               "sdt_pm_op_type c, "\               "sdt_ucs_operator d "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and date_format(c.inactive_time,'%%Y')='2037' "\               "and date_format(d.inactive_time,'%%Y')='2037' "\               "and a.developer_id=b.developer_id "\               "and a.operator_id=d.operator_id "\               "and a.type_id=c.op_type_id "\               "and a.club_id=%s "\               "and a.operator_id=%s "\               "and a.type_id in ('1004','2002','1002') "\               "order by a.active_time desc "        tmp_parm=[club_id,operator_id]        cursor.execute(strSQL,tmp_parm)        tb_result=cursor.fetchall()    return tb_resultdef correctDeveloperFunc(serial_no,new_serial_no, note, operator_id, main_club_id):    try:        tb_list=ucs_developer_balance.objects.filter(inactive_time='2037-01-01').get(serial_no=serial_no)        developer_id=tb_list.developer_id        balance=ucs_developer_balance.objects.filter(inactive_time='2037-01-01').filter(club_id=main_club_id)\                    .filter(developer_id=developer_id).order_by('-active_time')[0].balance        chance=tb_list.chance        chance = -chance        balance=balance+chance        t=ucs_developer_balance(serial_no=new_serial_no,                                developer_id=developer_id,                                club_id=main_club_id,                                chance=chance,                                balance=balance,                                type_id=1002,                                operator_id=operator_id,                                note=note)        t.save()        return True    except:        return Falsedef correctClubFunc(serial_no,new_serial_no, note, operator_id, main_club_id, group_id):    try:        tb_list=ucs_union_balance.objects.filter(inactive_time='2037-01-01').get(serial_no=serial_no)        account_id=tb_list.account_id        balance=ucs_union_balance.objects.filter(inactive_time='2037-01-01').filter(main_club_id=main_club_id)\            .filter(account_id=account_id).order_by('-id')[0].balance        chance = tb_list.chance        chance = -chance        balance = balance + chance        t=ucs_union_balance(serial_no=new_serial_no,                            account_id=account_id,                            balance=balance,                            chance=chance,                            chance_type=1002,                            chance_desc="客服冲正",                            operator_id=operator_id,                            group_id=group_id,                            note=note,                            main_club_id=main_club_id)        t.save()        return True    except Exception as e:        return Falsedef getCorrectCompanyList(club_id, operator_id):    with connection.cursor() as cursor:        strSQL="select a.serial_no, round(a.chance/1000,2) chance,round(a.balance/1000,2) balance, "\               "b.type,a.active_time,c.operator_name,a.note "\               "from sdt_ucs_company_balance a, "\               "sdt_pm_company_type b, "\               "sdt_ucs_operator c "\               "where  date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and date_format(c.inactive_time,'%%Y')='2037' "\               "and a.op_type_id=b.type_id "\               "and a.operator_id=c.operator_id "\               "and a.club_id=%s "\               "and a.operator_id=%s "        tmp_parm=[club_id, operator_id]        cursor.execute(strSQL, tmp_parm)        tb_result=cursor.fetchall()    return tb_resultdef correctCompanyFunc(serial_no,new_serial_no, note, operator_id):    try:        tb_list=ucs_company_balance.objects.filter(inactive_time='2037-01-01').get(serial_no=serial_no)        club_id=tb_list.club_id        balance=ucs_company_balance.objects.filter(inactive_time='2037-01-01')\            .filter(club_id=club_id).order_by('-active_time')[0].balance        chance=tb_list.chance        chance=-chance        balance=balance+chance        op_account_id=tb_list.op_account_id        t=ucs_company_balance(club_id=club_id,                              serial_no=new_serial_no,                              balance=balance,                              chance=chance,                              op_type_id=1006,                              operator_id=operator_id,                              note=note,                              op_account_id=op_account_id)        t.save()        return True    except:        return Falsedef companyIncomeGameReg(club_id, reg_month):    try:        ucs_result_table_l1.objects.filter(inactive_time='2037-01-01').filter(main_club_id=club_id).filter(flag=0)\            .update(flag=1,reg_month=reg_month)        ucs_result_table_l2.objects.filter(inactive_time='2037-01-01').filter(main_club_id=club_id).filter(flag=0) \           .update(flag=1, reg_month=reg_month)        return True    except Exception as e:        return Falsedef companyIncomeRegAccount(club_id, reg_month, operator_id,club_level):    #tb_list=getClubIncomeByType(club_id,club_level)    #俱乐部内自身收益    self_income_total=getSelfIncomeTotal(club_id)    #联盟上交收益    union_up_total=getUnionUpIncomeTotal(club_id)    #俱乐部内上交收益    club_up_total=getClubUpIncomeTotal(club_id)    try:        balance=ucs_company_balance.objects.filter(club_id=club_id)\            .filter(inactive_time='2037-01-01').order_by('-active_time')[0].balance    except:        balance=0    income = self_income_total+union_up_total+club_up_total    balance=balance+self_income_total+union_up_total+club_up_total    t=ucs_company_balance(club_id=club_id,                          serial_no=0,                          balance=balance,                          chance=income,                          op_type_id=1002,                          operator_id=operator_id,                          note=str(reg_month)+"销账收入",                          op_account_id=0                          )    t.save()    return Truedef developerRegFunc(club_id, developer_name, income_rate, insure_rate, note):    try:        tmp_id=ucs_developer.objects.filter(inactive_time='2037-01-01').order_by('-active_time')[0].developer_id        developer_id = tmp_id + 1    except:        developer_id=2000    club_info=ucs_subs_club.objects.filter(inactive_time='2037-01-01').filter(club_id=club_id).values('income_rate', 'insure_rate')    club_income=club_info[0]['income_rate']    club_insure=club_info[0]['insure_rate']    if (club_income>=int(income_rate) and club_insure>= int(insure_rate)):        if not ucs_developer.objects.filter(developer_id=developer_id).exists():            t=ucs_developer(developer_id=developer_id,                            developer_name=developer_name,                            developer_desc=note,                            income_rate=income_rate,                            insure_rate=insure_rate,                            club_id=club_id)            t.save()        else:            return False    else:        return False    return Truedef getDeveloperListByClubID(club_id):    try:        list=ucs_developer.objects.filter(inactive_time='2037-01-01')\            .filter(club_id=club_id).values('developer_name', 'income_rate', 'insure_rate', 'active_time', 'developer_desc')        return list    except:        return False#托管俱乐部玩家注册def UserDeveloperReg(developer_id, user_id, club_id):    try:        ucs_club_developer.objects.filter(inactive_time='2037-01-01').filter(club_id=club_id).get(user_id=user_id)        return False    except:        try:            t = ucs_club_developer(user_id=user_id,                                    developer_id=developer_id,                                    club_id=club_id)            t.save()            return True        except Exception as e:            return Falsedef getDeveUserList(club_id, developer_id):    with connection.cursor() as cursor:        strSQL="select a.developer_name, c.user_name,b.active_time from sdt_ucs_developer a, "\               "sdt_ucs_club_developer b, "\               "sdt_ucs_subs_user c "\               "where a.developer_id=b.developer_id "\               "and b.user_id=c.user_id "\               "and date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' " \               "and date_format(c.inactive_time,'%%Y')='2037' " \               "and a.developer_id=%s "\               "and b.club_id=%s "\               "order by b.active_time desc"        tmp_parm=[developer_id, club_id]        cursor.execute(strSQL, tmp_parm)        tb_result=cursor.fetchall()    return tb_resultdef getUserListWithoutBand(club_id):    with connection.cursor() as cursor:        strSQL="select a.user_id,b.user_name from sdt_ucs_club_user a, "\               "sdt_ucs_subs_user b "\               "where a.user_id=b.user_id "\               "and date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s "\               "and b.user_id not in( "\               "select c.user_id from sdt_ucs_club_developer c "\               "where date_format(c.inactive_time,'%%Y')='2037' "\               "and c.club_id=%s) "        tmp_parm = [club_id, club_id]        cursor.execute(strSQL, tmp_parm)        tb_result = cursor.fetchall()    return tb_resultdef getDeveUserListByClub(club_id):    with connection.cursor() as cursor:        strSQL="select a.user_id,a.developer_id,b.developer_name,c.user_name,a.active_time from sdt_ucs_club_developer a, "\               "sdt_ucs_developer b, "\               "sdt_ucs_subs_user c "\               "where a.developer_id=b.developer_id "\               "and a.user_id=c.user_id "\               "and date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and date_format(c.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s "\               "order by a.active_time desc"        cursor.execute(strSQL, club_id)        tb_result=cursor.fetchall()    return tb_result#托管俱乐部玩家解绑def developerUserUnband(club_id, developer_id, user_id):    try:        ucs_club_developer.objects.filter(inactive_time='2037-01-01')\            .filter(developer_id=developer_id).filter(club_id=club_id).filter(user_id=user_id).update(inactive_time=now())        return True    except:        return Falsedef getResultList(start_date, end_date):    with connection.cursor() as cursor:        strSQL="select a.game_no,concat(b.blind_desc,'(',c.ante,')'), "\               "date_format(a.start_time ,'%%m/%%d %%H:%%i:%%s' ) "\               "from sdt_ucs_gamerecord a, "\               "sdt_pm_blind b, "\               "sdt_pm_ante c "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.blind=b.blind_id "\               "and b.blind_id=c.blind_id "\               "and a.ante=c.ante "\               "and date_format(a.record_time,'%%Y-%%m-%%d') between %s and %s "\               "and a.status_id=5 "        tmp_parm=[start_date, end_date]        cursor.execute(strSQL, tmp_parm)        tb_result=cursor.fetchall()    return tb_resultdef getResultListPre():    with connection.cursor() as cursor:        strSQL="select a.game_no,concat(b.blind_desc,'(',c.ante,')'), "\               "date_format(a.start_time ,'%m/%d %H:%i:%s' ) "\               "from sdt_ucs_gamerecord a, "\               "sdt_pm_blind b, "\               "sdt_pm_ante c "\               "where date_format(a.inactive_time,'%Y')='2037' "\               "and a.blind=b.blind_id "\               "and b.blind_id=c.blind_id "\               "and a.ante=c.ante "\               "and date_format(a.record_time,'%Y-%m-%d') between %s and %s "\               "and a.status_id=5 "\               "limit 20"        cursor.execute(strSQL)        tb_result=cursor.fetchall()    return tb_resultdef getResultListPre():    with connection.cursor() as cursor:        strSQL="select a.game_no,concat(b.blind_desc,'(',c.ante,')'), "\               "date_format(a.record_time ,'%m/%d %H:%i:%s' ) "\               "from sdt_ucs_gamerecord a, "\               "sdt_pm_blind b, "\               "sdt_pm_ante c "\               "where date_format(a.inactive_time,'%Y')='2037' "\               "and a.blind=b.blind_id "\               "and b.blind_id=c.blind_id "\               "and a.ante=c.ante "\               "and a.status_id=5 "\               "ORDER by a.record_time desc " \               "limit 20"        cursor.execute(strSQL)        tb_result=cursor.fetchall()    return tb_resultdef getDeveTableList(club_id, developer_id, start_date, end_date):    with connection.cursor() as cursor:        strSQL="select a.developer_id,a.game_no,date_format(a.active_time,'%%c-%%d %%H:%%i') record_time, "\               "round(sum(a.score_final)/1000,2) score_final, "\               "count(*) cnt, "\               "round(sum(a.income_water)/1000,2) income_water, "\               "round(sum(a.income_insure)/1000,2) income_insure, "\               "round(sum(a.income_total)/1000,2) income_total, "\               "round(sum(a.up_total)/1000,2) up_total, "\               "round(sum(a.delivery)/1000,2) delivery "\               "from sdt_ucs_result_table_l2 a "\               "where a.developer_id=%s "\               "and a.main_club_id=%s "\               "and date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(a.active_time,'%%Y-%%m-%%d') BETWEEN %s and %s "\               "group by a.developer_id,game_no,a.active_time desc"        tmp_parm=[developer_id, club_id, start_date, end_date]        cursor.execute(strSQL, tmp_parm)        tb_result=cursor.fetchall()    return tb_resultdef getDeveTableSum(club_id, developer_id, start_date, end_date):    with connection.cursor() as cursor:        strSQL="select "\               "round(sum(a.score_final)/1000,2) score_final, "\               "count(*) cnt, "\               "round(sum(a.income_water)/1000,2) income_water, "\               "round(sum(a.income_insure)/1000,2) income_insure, "\               "round(sum(a.income_total)/1000,2) income_total, "\               "round(sum(a.up_total)/1000,2) up_total, "\               "round(sum(a.delivery)/1000,2) delivery "\               "from sdt_ucs_result_table_l2 a "\               "where a.main_club_id=%s "\               "and a.developer_id=%s "\               "and date_format(a.active_time,'%%Y-%%m-%%d') BETWEEN %s and %s "\               "and date_format(a.inactive_time,'%%Y')='2037' "        tmp_parm = [club_id, developer_id, start_date, end_date]        cursor.execute(strSQL, tmp_parm)        tb_result = cursor.fetchall()    return tb_result''''def getDeveTableDetail(club_id, game_no,developer_id):    with connection.cursor() as cursor:        strSQL="select a.user_name,round(a.score/1000,2) score, "\               "round(a.insure/1000,2) insure, "\               "round(a.income_water/1000,2) income_water, "\               "round(a.income_insure/1000,2) income_insure, "\               "round(a.income_total/1000,2) income_total, "\               "round(a.up_total/1000,2) up_total "\               "from sdt_ucs_result_table_l2 a, "\               "sdt_ucs_developer b "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and a.developer_id=b.developer_id "\               "and a.game_no=%s "\               "and a.main_club_id=%s "\               "and a.developer_id=%s "\               "and a.club_id is null"        tmp_parm = [game_no, club_id,developer_id]        cursor.execute(strSQL, tmp_parm)        tb_result=cursor.fetchall()    return tb_result'''''def getDeveTableDetail(club_id, game_no,developer_id):    with connection.cursor() as cursor:        strSQL="select a.user_name,round(a.score/1000,2),round(a.score_final/1000,2), "\               "round(a.income_water/1000,2),round(a.income_insure/1000,2), "\               "round(a.income_total/1000,2),round(a.up_total/1000,2),round(a.delivery/1000,2) "\               "from sdt_ucs_result_table_l2 a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.main_club_id=%s "\               "and a.game_no=%s "\               "and a.developer_id=%s "        tmp_parm = [club_id, game_no, developer_id]        cursor.execute(strSQL, tmp_parm)        tb_result = cursor.fetchall()        strSQL="select round(sum(a.score)/1000,2) score,round(sum(a.score_final)/1000,2) score_final, "\               "round(sum(a.income_water)/1000,2) income_water,round(sum(a.income_insure)/1000,2) income_insure, "\               "round(sum(a.income_total)/1000,2) income_total,round(sum(a.up_total)/1000,2) up_total, "\               "round(sum(a.delivery)/1000,2) delivery "\               "from sdt_ucs_result_table_l2 a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.main_club_id=%s "\               "and a.game_no=%s "\               "and a.developer_id=%s "        tmp_parm = [club_id, game_no, developer_id]        cursor.execute(strSQL, tmp_parm)        tb_sum = cursor.fetchall()        result = {}        club_name = ucs_developer.objects.filter(inactive_time='2037-01-01').get(developer_id=developer_id).developer_name        result['club_name'] = club_name        result['game_no'] = game_no        result['detail'] = tb_result        result['sum'] = tb_sum    return resultdef getDeveResultByDate(club_id,startdate, enddate,developer_id):    with connection.cursor() as cursor:        if developer_id is None:            strSQL="select x.*,ifnull(round(y.balance/1000,2),0) balance from( "\                   "select b.developer_id,b.developer_name, "\                   "count(distinct a.game_no) cnt, "\                   "round(sum(a.score_final)/1000,2) score_final, "\                   "count(*) playercnt, "\                   "round(sum(a.income_water)/1000,2) income_water, "\                   "round(sum(a.income_insure)/1000,2) income_insure, "\                   "round(sum(a.income_total)/1000,2) income_total, "\                   "round(sum(a.up_total)/1000,2) up_total "\                   "from sdt_ucs_result_table_l2 a, "\                   "sdt_ucs_developer b "\                   "where date_format(a.inactive_time,'%%Y')='2037' "\                   "and date_format(b.inactive_time,'%%Y')='2037' "\                   "and a.developer_id=b.developer_id "\                   "and a.main_club_id=%s "\                   "and date_format(a.active_time,'%%Y-%%m-%%d') between %s and %s "\                   "group by b.developer_id,b.developer_name) x left join "\                   "(select  x.developer_id,x.balance from (select a.developer_id,a.active_time,a.balance from sdt_ucs_developer_balance a "\                   "where date_format(a.inactive_time,'%%Y')='2037') x, "\                   "(select a.developer_id,a.active_time from (select a.developer_id,a.active_time from sdt_ucs_developer_balance a "\                   "where date_format(a.inactive_time,'%%Y')='2037') a "\                   "left join (select a.developer_id,a.active_time from sdt_ucs_developer_balance a "\                   "where date_format(a.inactive_time,'%%Y')='2037') b "\                   "on a.developer_id=b.developer_id and a.active_time<=b.active_time "\                   "group by a.developer_id,a.active_time "\                   "having count(b.developer_id)=1) y "\                   "where x.developer_id=y.developer_id "\                   "and x.active_time=y.active_time "\                   "order by x.developer_id,x.active_time desc) y "\                   "on x.developer_id=y.developer_id "            tmp_parm = [club_id, startdate, enddate]        else:            strSQL="select x.*,ifnull(round(y.balance/1000,2),0) balance from( "\                   "select b.developer_id,b.developer_name, "\                   "count(distinct a.game_no) cnt, "\                   "round(sum(a.score_final)/1000,2) score_final, "\                   "count(*) playercnt, "\                   "round(sum(a.income_water)/1000,2) income_water, "\                   "round(sum(a.income_insure)/1000,2) income_insure, "\                   "round(sum(a.income_total)/1000,2) income_total, "\                   "round(sum(a.up_total)/1000,2) up_total "\                   "from sdt_ucs_result_table_l2 a, "\                   "sdt_ucs_developer b "\                   "where date_format(a.inactive_time,'%%Y')='2037' "\                   "and date_format(b.inactive_time,'%%Y')='2037' "\                   "and a.developer_id=b.developer_id "\                   "and a.main_club_id=%s "\                   "and a.developer_id=%s "\                   "and date_format(a.active_time,'%%Y-%%m-%%d') between %s and %s "\                   "group by b.developer_id,b.developer_name) x left join "\                   "(select  x.developer_id,x.balance from (select a.developer_id,a.active_time,a.balance from sdt_ucs_developer_balance a "\                   "where date_format(a.inactive_time,'%%Y')='2037' and a.developer_id=%s) x, "\                   "(select a.developer_id,a.active_time from (select a.developer_id,a.active_time from sdt_ucs_developer_balance a "\                   "where date_format(a.inactive_time,'%%Y')='2037' and a.developer_id=%s) a "\                   "left join (select a.developer_id,a.active_time from sdt_ucs_developer_balance a "\                   "where date_format(a.inactive_time,'%%Y')='2037' and a.developer_id=%s) b "\                   "on a.developer_id=b.developer_id and a.active_time<=b.active_time "\                   "group by a.developer_id,a.active_time "\                   "having count(b.developer_id)=1) y "\                   "where x.developer_id=y.developer_id "\                   "and x.active_time=y.active_time "\                   "order by x.developer_id,x.active_time desc) y "\                   "on x.developer_id=y.developer_id "            tmp_parm=[club_id,developer_id, startdate, enddate,developer_id,developer_id,developer_id]        cursor.execute(strSQL, tmp_parm)        tb_result = cursor.fetchall()    return tb_resultdef getDeveResultSumBydate(club_id, startdate, enddate,developer_id):    with connection.cursor() as cursor:        if developer_id is None:            strSQL="select "\                   "count(distinct a.game_no) cnt, "\                   "round(sum(a.score_final)/1000,2) score_final, "\                   "count(*) playercnt, "\                   "round(sum(a.income_water)/1000,2) income_water, "\                   "round(sum(a.income_insure)/1000,2) income_insure, "\                   "round(sum(a.income_total)/1000,2) income_total, "\                   "round(sum(a.up_total)/1000,2) up_total "\                   "from sdt_ucs_result_table_l2 a "\                   "where date_format(a.inactive_time,'%%Y')='2037' "\                   "and a.main_club_id=%s "\                   "and a.club_id is null "\                   "and date_format(a.active_time,'%%Y-%%m-%%d') between %s and %s "            tmp_parm = [club_id, startdate, enddate]        else:            strSQL="select "\                   "count(distinct a.game_no) cnt, "\                   "round(sum(a.score_final)/1000,2) score_final, "\                   "count(*) playercnt, "\                   "round(sum(a.income_water)/1000,2) income_water, "\                   "round(sum(a.income_insure)/1000,2) income_insure, "\                   "round(sum(a.income_total)/1000,2) income_total, "\                   "round(sum(a.up_total)/1000,2) up_total "\                   "from sdt_ucs_result_table_l2 a "\                   "where date_format(a.inactive_time,'%%Y')='2037' "\                   "and a.main_club_id=%s "\                   "and a.club_id is null "\                   "and a.developer_id=%s "\                   "and date_format(a.active_time,'%%Y-%%m-%%d') between %s and %s "            tmp_parm = [club_id,developer_id, startdate, enddate]        cursor.execute(strSQL, tmp_parm)        tb_result = cursor.fetchall()    return tb_resultdef reward_normal_add_func(blind_id, type_id, reward,club_id):    try:        t=ucs_game_reward(blind_id=blind_id,                          type_id=type_id,                          club_id=club_id,                          reward=reward)        t.save()        return True    except:        return Falsedef getRewardNormalList(club_id):    with connection.cursor() as cursor:        strSQL="select b.blind_id,c.type_id,b.blind_desc,c.type_name,round(a.reward/1000,2) reward from sdt_ucs_game_reward a, "\               "sdt_pm_blind b, "\               "sdt_pm_reward c "\               "where a.blind_id=b.blind_id "\               "and a.type_id=c.type_id "\               "and date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(c.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s "\               "order by b.blind_id asc, a.reward asc "        cursor.execute(strSQL,club_id)        tb_result=cursor.fetchall()    return tb_resultdef rewardNormalModify(blind_id, type_id, reward,club_id):    try:        ucs_game_reward.objects.filter(blind_id=blind_id).filter(club_id=club_id).filter(type_id=type_id).update(inactive_time=now())    except:        return False    result=reward_normal_add_func(blind_id,type_id,reward,club_id)    return resultdef rewardNormalDelete(blind_id, type_id):    try:        ucs_game_reward.objects.filter(blind_id=blind_id).filter(type_id=type_id).update(inactive_time=now())        return True    except:        return Falsedef getRewardFromUserList(game_no, club_id):    with connection.cursor() as cursor:        strSQL="select DISTINCT a.user_id,c.account_id, d.user_name "\               "from sdt_ucs_game_freeze_record a, "\               "sdt_ucs_club_user b, "\               "sdt_ucs_account c, "\               "sdt_ucs_subs_user d "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and date_format(c.inactive_time,'%%Y')='2037' "\               "and date_format(d.inactive_time,'%%Y')='2037' "\               "and a.user_id=b.user_id "\               "and b.user_id=c.user_id "\               "and b.user_id=d.user_id "\               "and a.club_id=b.club_id "\               "and b.club_id=c.club_id "\               "and a.game_no=%s "\               "and a.club_id=%s "        tmp_parm=[game_no, club_id]        cursor.execute(strSQL, tmp_parm)        tb_result=cursor.fetchall()    return tb_resultdef getRewardByGameno(game_no,club_id):    with connection.cursor() as cursor:        strSQL="select c.type_name,b.blind_id,b.type_id,b.reward from sdt_ucs_gamerecord a, "\               "sdt_ucs_game_reward b, "\               "sdt_pm_reward c "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and date_format(c.inactive_time,'%%Y')='2037' "\               "and a.game_no=%s "\               "and a.blind=b.blind_id "\               "and b.type_id=c.type_id "\               "and club_id=%s "        tmp_parm=[game_no,club_id]        cursor.execute(strSQL, tmp_parm)        tb_result=cursor.fetchall()    return tb_resultdef depositRateReg(club_id, type_id, rate):    try:        pm_deposit_rate.objects.filter(inactive_time='2037-01-01').filter(club_id=club_id).get(account_type=type_id)        return False    except:        t=pm_deposit_rate(account_type=type_id,                          rate=rate,                          club_id=club_id)        t.save()    return Truedef getDepositList(club_id):    with connection.cursor() as cursor:        strSQL="select b.type_id,b.type,a.rate from sdt_pm_deposit_rate a, "\               "sdt_pm_account_type b "\               "where a.account_type=b.type_id "\               "and date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s "        cursor.execute(strSQL, club_id)        tb_result=cursor.fetchall()    return tb_resultdef getDepositAccountList(club_id, group_id):    with connection.cursor() as cursor:        strSQL="select b.account_id,b.type_id,a.type from sdt_pm_account_type a, "\               "sdt_ucs_club_account b "\               "where a.type_id=b.type_id "\               "and date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and b.club_id=%s "\               "and b.group_id=%s "\               "and b.type_id<>3 "        tmp_parm=[club_id, group_id]        cursor.execute(strSQL, tmp_parm)        tb_result=cursor.fetchall()    return tb_resultdef depositReg(serial_no, club_id, group_id, account_id, type_id, deposit, fee, operator_id, account_target_id):    try:        ucs_deposit_balance.objects.filter(inactive_time='2037-01-01').get(serial_no=serial_no)        return False    except:        t=ucs_deposit_balance(serial_no=serial_no,                              club_id=club_id,                              group_id=group_id,                              account_id=account_id,                              type_id=type_id,                              deposit=deposit,                              fee=fee,                              operator_id=operator_id,                              status_id=1,                              account_target_id=account_target_id)        t.save()    return True#返回俱乐部单个账户余额def getClubBalanceByAccount(account_id):    try:        balance=ucs_club_balance.objects.filter(inactive_time='2037-01-01').filter(account_id=account_id)\            .order_by('-id')[0].balance        return balance    except:        return 0def getDepositBalanceList(club_id,group_id):    with connection.cursor() as cursor:        strSQL="select a.account_target_id,a.serial_no,concat(d.group_name,e.type) account, "\               "round(a.deposit/1000,2) deposit,round(a.fee/1000,2) fee, "\               "f.status,c.operator_name, a.active_time from sdt_ucs_deposit_balance a, "\               "sdt_ucs_club_account b, "\               "sdt_ucs_operator c, "\               "sdt_ucs_operator_group d, "\               "sdt_pm_account_type e, "\               "sdt_pm_deposit_status f "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and date_format(c.inactive_time,'%%Y')='2037' "\               "and date_format(d.inactive_time,'%%Y')='2037' "\               "and date_format(e.inactive_time,'%%Y')='2037' "\               "and date_format(f.inactive_time,'%%Y')='2037' "\               "and a.account_id=b.account_id "\               "and a.operator_id=c.operator_id "\               "and a.group_id=d.group_id "\               "and a.type_id=e.type_id "\               "and a.status_id=f.status_id "\               "and a.status_id=1 "\               "and a.club_id=%s "\               "and a.group_id=%s "        tmp_parm=[club_id,group_id]        cursor.execute(strSQL,tmp_parm)        tb_result=cursor.fetchall()    return tb_resultdef getDepositSumByType(club_id):    with connection.cursor() as cursor:        strSQL="select b.type,round(sum(a.deposit)/1000,2) deposit from sdt_ucs_deposit_balance a, "\               "sdt_pm_account_type b "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and a.type_id=b.type_id "\               "and a.club_id=%s "\               "and a.status_id=1 "\               "group by b.type "        cursor.execute(strSQL, club_id)        tb_result=cursor.fetchall()    return tb_resultdef getDepoistSumByClub(club_id):    with connection.cursor() as cursor:        strSQL="select ifnull(sum(a.deposit),0) deposit from sdt_ucs_deposit_balance a, "\               "sdt_pm_account_type b "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and a.type_id=b.type_id "\               "and a.club_id=%s "\               "and a.status_id=1 "        cursor.execute(strSQL, club_id)        tb_result=cursor.fetchall()        depoist_sum=tb_result[0][0]    return float(depoist_sum)def modifyAccountDesc(account_id, account_desc):    try:        account_list=ucs_club_account.objects.filter(inactive_time='2037-01-01').get(account_id=account_id)        club_id=account_list.club_id        type_id=account_list.type_id        group_id=account_list.group_id        ucs_club_account.objects.filter(inactive_time='2037-01-01').filter(account_id=account_id).update(inactive_time=now())        t=ucs_club_account(account_id=account_id,                           club_id=club_id,                           type_id=type_id,                           group_id=group_id,                           account_desc=account_desc)        t.save()        return True    except:        return Falsedef depositArrived(serial_no,operator_id, club_id,new_serial_no):    try:        tb_deposit=ucs_deposit_balance.objects.filter(inactive_time='2037-01-01').filter(serial_no=serial_no)[0]        group_id=tb_deposit.group_id        account_id=tb_deposit.account_id        type_id=tb_deposit.type_id        deposit=tb_deposit.deposit        fee=tb_deposit.fee        account_target_id=tb_deposit.account_target_id        t=ucs_deposit_balance(serial_no=new_serial_no,                              club_id=club_id,                              group_id=group_id,                              account_id=account_id,                              type_id=type_id,                              deposit=deposit,                              fee=fee,                              operator_id=operator_id,                              status_id=2,                              account_target_id=account_target_id)        t.save()        ucs_deposit_balance.objects.filter(inactive_time='2037-01-01').filter(serial_no=serial_no).update(inactive_time=now())        return True    except:        return Falsedef getUserBalanceListByDate(club_id, account_id, startdate,enddate):    with connection.cursor() as cursor:        strSQL="select round(a.chance/1000,2) chance,round(a.balance/1000,2) balance, "\               "a.chance_desc,date_format(a.updatetime,'%%Y-%%m-%%d %%T') update_time, "\               "b.operator_name,a.note "\               "from sdt_ucs_balance a, "\               "sdt_ucs_operator b "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and a.operator_id=b.operator_id "\               "and a.account_id=%s "\               "and a.club_id=%s "\               "and date_format(a.updatetime,'%%Y-%%m-%%d') between %s and %s "\               "order by a.id desc "        tmp_parm=[account_id,club_id,startdate,enddate]        cursor.execute(strSQL, tmp_parm)        tb_result=cursor.fetchall()    return tb_resultdef getUserResultListByDate(club_id, user_id, startdate, enddate):    with connection.cursor() as cursor:        strSQL="select a.game_no,round(a.score/1000,2) score, "\               "round(a.score_final/1000,2) score_final, "\               "round(a.insure/1000,2) insure,a.active_time "\               "from sdt_ucs_result_table a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.user_id=%s "\               "and a.club_id=%s "\               "and date_format(a.active_time,'%%Y-%%m-%%d') between %s and %s "        tmp_parm = [user_id, club_id, startdate, enddate]        cursor.execute(strSQL, tmp_parm)        tb_result = cursor.fetchall()    return tb_resultdef getUserFreezeListByDate(club_id, user_id, startdate, enddate):    with connection.cursor() as cursor:        strSQL="select a.game_no, round(a.freeze_num/1000,2) freeze_num ,a.active_time, a.status,a.note "\               "from sdt_ucs_game_freeze_record a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s "\               "and a.user_id=%s "\               "and date_format(a.active_time,'%%Y-%%m-%%d') between %s and %s "\               "order by a.active_time desc "        tmp_parm = [club_id, user_id, startdate, enddate]        cursor.execute(strSQL, tmp_parm)        tb_result = cursor.fetchall()    return tb_resultdef getUserIncomeListByDate(club_id, user_id, startdate, enddate):    with connection.cursor() as cursor:        strSQL="select a.game_no,round(a.score/1000,2) score, "\               "round(a.score_final/1000,2) score_final, "\               "round(abs(a.score_final)/1000,2) score_abs, "\               "round(a.insure/1000,2) insure, "\               "round(a.income_water/1000,2) income_water, "\               "round(a.income_insure/1000,2) income_insure, "\               "round(a.income_total/1000,2) income_total, "\               "a.active_time  "\               "from sdt_ucs_result_table a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.user_id=%s "\               "and a.club_id=%s "\               "and date_format(a.active_time,'%%Y-%%m-%%d') between %s and %s "\               "order by a.active_time desc "        tmp_parm = [user_id, club_id, startdate, enddate]        cursor.execute(strSQL, tmp_parm)        tb_result = cursor.fetchall()    return tb_resultdef getUserIncomeSumByDate(club_id, user_id, startdate, enddate):    with connection.cursor() as cursor:        strSQL="select " \               "sum(round(a.score/1000,2)) score, "\               "sum(round(a.score_final/1000,2)) score_final, "\               "sum(round(abs(a.score_final)/1000,2)) score_abs, "\               "sum(round(a.insure/1000,2)) insure, "\               "sum(round(a.income_water/1000,2)) income_water, "\               "sum(round(a.income_insure/1000,2)) income_insure, "\               "sum(round(a.income_total/1000,2)) income_total "\               "from sdt_ucs_result_table a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.user_id=%s "\               "and a.club_id=%s "\               "and date_format(a.active_time,'%%Y-%%m-%%d') between %s and %s "        tmp_parm = [user_id, club_id, startdate, enddate]        cursor.execute(strSQL, tmp_parm)        tb_result = cursor.fetchall()    return tb_resultdef getPermission(operator_id):    try:        group_id=ucs_operator.objects.filter(inactive_time='2037-01-01').get(operator_id=operator_id).permission_group        permission=ucs_permission.objects.filter(inactive_time='2037-01-01').filter(group_id=group_id)        return permission    except:        return Falsedef getPermissionList(group_id):    with connection.cursor() as cursor:        strSQL="select a.type_id from sdt_ucs_permission a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.group_id=%s "        cursor.execute(strSQL, group_id)        tb_result=cursor.fetchall()    return tb_resultdef setPermissionGroup(group_id,type_list):    try:        ucs_permission.objects.filter(inactive_time='2037-01-01').filter(group_id=group_id).update(inactive_time=now())        for t in type_list:            t=ucs_permission(group_id=group_id,                           type_id=t)            t.save()        return True    except:        return Falsedef getPermissionOperatorList():    with connection.cursor() as cursor:        strSQL="select a.operator_id,a.is_active,a.operator_name,a.login_id,c.group_name,b.club_name,b.club_lever from sdt_ucs_operator a, "\               "sdt_ucs_subs_club b, "\               "sdt_ucs_permission_group c "\               "where date_format(a.inactive_time,'%Y')='2037' "\               "and date_format(b.inactive_time,'%Y')='2037' "\               "and date_format(c.inactive_time,'%Y')='2037' "\               "and a.club_id=b.club_id "\               "and a.permission_group=c.group_id "\               "order by a.active_time desc "        cursor.execute(strSQL)        tb_result=cursor.fetchall()    return tb_resultdef changeOperatrorPassword(operator_id,old_password,new_password):    try:        tb_op=ucs_operator.objects.filter(inactive_time='2037-01-01').filter(operator_id=operator_id)        new_password_input=make_password(new_password, None, 'pbkdf2_sha256')        if check_password(old_password,tb_op[0].password):            login_id=tb_op[0].login_id            club_id=tb_op[0].club_id            group_id=tb_op[0].group_id            permission_group=tb_op[0].permission_group            is_active=tb_op[0].is_active            operator_name=tb_op[0].operator_name            tb_op.update(inactive_time=now())            t=ucs_operator(operator_id=operator_id,                           operator_name=operator_name,                           login_id=login_id,                           password=new_password_input,                           club_id=club_id,                           group_id=group_id,                           permission_group=permission_group,                           is_active=is_active)            t.save()            return True        else:return False    except Exception as e:        return Falsedef setOperatorPassword(operator_id, new_password):    try:        tb_op = ucs_operator.objects.filter(inactive_time='2037-01-01').filter(operator_id=operator_id)        new_password_input = make_password(new_password, None, 'pbkdf2_sha256')        login_id = tb_op[0].login_id        club_id = tb_op[0].club_id        group_id = tb_op[0].group_id        permission_group = tb_op[0].permission_group        is_active = tb_op[0].is_active        operator_name = tb_op[0].operator_name        tb_op.update(inactive_time=now())        t = ucs_operator(operator_id=operator_id,                         operator_name=operator_name,                         login_id=login_id,                         password=new_password_input,                         club_id=club_id,                         group_id=group_id,                         permission_group=permission_group,                         is_active=is_active)        t.save()        return True    except:        return Falsedef createUploadImgName(imgtype):#区分战绩还是牌局奖励,1表示战绩，2表示牌局奖励    part1 = str(datetime.datetime.now().strftime('%m%d%H%M%S'))    if(imgtype==1):        filename="r"+part1    elif (imgtype==2):        filename = "w" + part1    return filenamedef getUserListWithoutCredit(club_id):    with connection.cursor() as cursor:        strSQL="select x.account_id,x.user_id,y.user_name from ( "\               "select a.account_id,a.user_id from sdt_ucs_account a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s "\               "and a.account_level=1 "\               "and a.account_id not in( "\               "select b.account_id from sdt_ucs_credit_account b "\               "where date_format(b.inactive_time,'%%Y')='2037') "\               ") x, "\               "sdt_ucs_subs_user y "\               "where date_format(y.inactive_time,'%%Y')='2037' "\               "and x.user_id=y.user_id "        cursor.execute(strSQL,club_id)        tb_result=cursor.fetchall()    return tb_resultdef getCreditUserList(club_id):    with connection.cursor() as cursor:        strSQL="select a.account_id,b.user_id,round(a.credit_num/1000) credit,c.user_name,a.active_time, a.note from sdt_ucs_credit_account a, "\               "sdt_ucs_account b, "\               "sdt_ucs_subs_user c "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and date_format(c.inactive_time,'%%Y')='2037' "\               "and a.account_id=b.account_id "\               "and b.user_id=c.user_id "\               "and a.club_id=%s "\               "and a.club_id=b.club_id "\               "and b.account_level=1 "\               "order by a.active_time desc "        cursor.execute(strSQL,club_id)        tb_result=cursor.fetchall()    return tb_resultdef creditUserReg(account_id,club_id,credit_num,operator_id, note):    try:        if ucs_credit_account.objects.filter(inactive_time='2037-01-01')\                .filter(account_id=account_id).filter(club_id=club_id).exists():            return False        else:            t=ucs_credit_account(account_id=account_id,                                 credit_num=credit_num,                                 operator_id=operator_id,                                 note=note,                                 club_id=club_id)            t.save()    except Exception as e:        return False    return Truedef creditUserDisable(account_id, club_id):    try:        ucs_credit_account.objects.filter(inactive_time='2037-01-01').filter(account_id=account_id)\            .filter(club_id=club_id).update(inactive_time=now())        return True    except:        return Falsedef creditDeveloperReg(developer_id,club_id,credit_num,note,operator_id):    try:        if ucs_credit_developer_account.objects.filter(inactive_time='2037-01-01').filter(club_id=club_id)\                .filter(developer_id=developer_id).exists():            return False        else:            t=ucs_credit_developer_account(developer_id=developer_id,                                           club_id=club_id,                                           credit_num=credit_num,                                           note=note,                                           operator_id=operator_id)            t.save()    except:        return False    return Truedef getCreditDeveloperList(club_id):    with connection.cursor() as cursor:        strSQL="select a.developer_id,b.developer_name,round(a.credit_num/1000) credit_num, "\               "a.active_time,a.note "\               "from sdt_ucs_credit_developer_account a, "\               "sdt_ucs_developer b "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and a.developer_id=b.developer_id "\               "and a.club_id=%s "\               "order by a.active_time desc "        cursor.execute(strSQL,club_id)        tb_result=cursor.fetchall()    return tb_resultdef creditDeveloperDisable(developer_id,club_id):    try:        ucs_credit_developer_account.objects.filter(inactive_time='2037-01-01').filter(developer_id=developer_id)\            .filter(club_id=club_id).update(inactive_time=now())        return True    except:        return False#取托管俱乐部可用余额def getDeveloperUsefulBalance(developer_id, club_id):    try:        balance=ucs_developer_balance.objects.filter(inactive_time='2037-01-01').filter(club_id=club_id)\            .filter(developer_id=developer_id).order_by('-active_time')[0].balance    except:        balance=0    try:        credit_num=ucs_credit_developer_account.objects.filter(inactive_time='2037-01-01').filter(club_id=club_id)\            .get(developer_id=developer_id).credit_num    except:        credit_num=0    userfulbalance=balance+credit_num    return userfulbalancedef getDeveloperBalanceList(club_id):    with connection.cursor() as cursor:        strSQL="select  x.developer_id,x.developer_name,ifnull(round(x.balance/1000,2),0), "\               "ifnull(round(x.credit_num/1000,0),0) from (select p.*,ifnull(d.credit_num,0) credit_num from( "\               "select a.club_id,a.developer_id,c.developer_name,a.active_time,a.balance from sdt_ucs_developer_balance a, "\               "sdt_ucs_developer c "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(c.inactive_time,'%%Y')='2037' "\               "and a.developer_id=c.developer_id "\               "and a.club_id=%s) p left JOIN "\               "sdt_ucs_credit_developer_account d "\               "on p.club_id=d.club_id "\               "and p.developer_id=d.developer_id "\               "and date_format(d.inactive_time,'%%Y')='2037') x, "\               "(select a.developer_id,a.active_time from (select a.developer_id,a.active_time from sdt_ucs_developer_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s) a "\               "left join (select a.developer_id,a.active_time from sdt_ucs_developer_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s) b "\               "on a.developer_id=b.developer_id and a.active_time<=b.active_time "\               "group by a.developer_id,a.active_time "\               "having count(b.developer_id)=1) y "\               "where x.developer_id=y.developer_id "\               "and x.active_time=y.active_time "\               "order by x.developer_id,x.active_time desc "        tmp_parm=[club_id, club_id, club_id]        cursor.execute(strSQL, tmp_parm)        tb_result=cursor.fetchall()    return tb_result#托管未结款合计def getDeveloperBalanceSum(club_id):    with connection.cursor() as cursor:        strSQL="select  sum(x.balance) from (select a.developer_id,a.active_time,a.balance from sdt_ucs_developer_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s) x , "\               "(select a.developer_id,a.active_time from (select a.developer_id,a.active_time from sdt_ucs_developer_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s) a "\               "left join (select a.developer_id,a.active_time from sdt_ucs_developer_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s) b "\               "on a.developer_id=b.developer_id and a.active_time<=b.active_time "\               "group by a.developer_id,a.active_time "\               "having count(b.developer_id)=1) y "\               "where x.developer_id=y.developer_id "\               "and x.active_time=y.active_time "        tmp_parm = [club_id, club_id, club_id]        cursor.execute(strSQL, tmp_parm)        tb_result = cursor.fetchall()        if tb_result[0][0] is None:            t=0        else:t=tb_result[0][0]        result=t    return float(result)def getDeveloperRealBalance(developer_id,club_id):    try:        balance=ucs_developer_balance.objects.filter(club_id=club_id).filter(developer_id=developer_id).order_by('-active_time')[0].balance        return balance    except:        return 0def getUserBalanceMinusList(club_id):    with connection.cursor() as cursor:        strSQL="select cr.account_id,cr.user_id,cr.user_name,round(cr.credit_num/1000,0)," \               "cr.developer_name,ba.updatetime,round(ba.balance/1000,2) " \               "from (select user_info.*,deve.developer_name from ( "\               "select user.*,c.credit_num from( "\               "select a.account_id,a.user_id,b.user_name from sdt_ucs_account a, "\               "sdt_ucs_subs_user b "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s "\               "and a.account_level=1 "\               "and a.user_id=b.user_id) user left join "\               "(select account_id,credit_num from sdt_ucs_credit_account where date_format(inactive_time,'%%Y')='2037') c "\               "on user.account_id=c.account_id) user_info left join "\               "(select a.user_id,c.developer_name from sdt_ucs_club_developer a, "\               "sdt_ucs_developer c "\               "where a.developer_id=c.developer_id "\               "and date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(c.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s "\               "and a.club_id=c.club_id) deve "\               "on user_info.user_id=deve.user_id) cr, "\               "(select x.user_id,x.account_id,x.updatetime,x.balance from (select a.user_id,a.account_id,a.updatetime,a.balance from sdt_ucs_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s ) x, "\               "(select a.account_id,a.updatetime from (select a.account_id,a.updatetime from sdt_ucs_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s) a "\               "left join (select a.account_id,a.updatetime from sdt_ucs_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s) b "\               "on a.account_id=b.account_id and a.updatetime<=b.updatetime "\               "group by a.account_id,a.updatetime "\               "having count(b.account_id)=1) y "\               "where x.account_id=y.account_id "\               "and x.updatetime=y.updatetime "\               "and x.balance<0  ) ba "\               "where cr.user_id = ba.user_id "\               "order by ba.updatetime desc"        tmp_parm = [club_id, club_id,club_id, club_id,club_id]        cursor.execute(strSQL, tmp_parm)        tb_result = cursor.fetchall()    return tb_result#返回财务组账户余额def getOperatorGroupBalanceList(group_id,club_id):    with connection.cursor() as cursor:        strSQL="select  x.* from "\               "(select a.account_id,c.group_name,b.account_desc, "\               "d.type,a.update_time,round(a.balance/1000,2) from sdt_ucs_club_balance a , "\               "sdt_ucs_club_account b, "\               "sdt_ucs_operator_group c, "\               "sdt_pm_account_type d "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and date_format(c.inactive_time,'%%Y')='2037' "\               "and date_format(d.inactive_time,'%%Y')='2037' "\               "and a.account_id=b.account_id "\               "and b.group_id=c.group_id "\               "and d.type_id=b.type_id "\               "and b.club_id=%s) x, "\               "(select a.account_id,a.update_time from (select a.account_id,a.update_time from sdt_ucs_club_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037') a "\               "left join (select a.account_id,a.update_time from sdt_ucs_club_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037') b "\               "on a.account_id=b.account_id and a.update_time<=b.update_time "\               "group by a.account_id,a.update_time "\               "having count(b.account_id)=1) y "\               "where x.account_id=y.account_id "\               "and x.update_time=y.update_time "\               "order by x.account_id,x.update_time desc "        #tmp_parm=[group_id,club_id]        cursor.execute(strSQL, club_id)        tb_result=cursor.fetchall()    return tb_resultdef getUserCredit(account_id,club_id):    try:        credit=ucs_credit_account.objects.filter(inactive_time='2037-01-01').filter(club_id=club_id).get(account_id=account_id).credit_num        return credit    except:        return 0def getDeveloerManageList(club_id):    with connection.cursor() as cursor:        strSQL="select a.operator_id,a.is_active,a.operator_name,a.login_id,a.active_time from sdt_ucs_operator a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s "\               "and developer_id is not null "        cursor.execute(strSQL,club_id)        tb_result=cursor.fetchall()    return tb_resultdef getRegisitedResultListByUnion(game_no):    with connection.cursor() as cursor:        strSQL="select b.club_id,a.id,a.is_modify,a.user_name,b.club_name,round(a.score/1000,0), "\               "round(a.insure/1000,0)," \               "round(a.income_water/1000,2), "\               "round(a.income_insure/1000,2), "\               "round(a.waterup/1000,2), "\               "round(a.insure_up/1000,2) "\               "from sdt_ucs_result_table_l1 a, "\               "sdt_ucs_subs_club b "\               "where a.game_no=%s "\               "and date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and a.flag=0 "\               "and a.level=0 "\               "and a.club_id=b.club_id "\               "and a.is_modify in (0,1) "        cursor.execute(strSQL,game_no)        tb_result=cursor.fetchall()    return tb_result#联盟战绩单条修正def correctResultByUnion(game_no,id,old_club_id,new_club_id,operator_id,club_id,group_id):    try:        new_club=ucs_subs_club.objects.filter(inactive_time='2037-01-01').get(club_id=new_club_id)        income_rate=new_club.income_rate        insure_rate=new_club.insure_rate        new_club_name=new_club.club_name    except:        return False    try:        t=ucs_result_table_l1.objects.get(id=id)        user_id=t.user_id        account_id=t.account_id        user_name=t.user_name        club_name=t.club_name        score=t.score        score_final=t.score_final        income_water=t.income_water        waterup=t.waterup        insure=t.insure        income_insure=t.income_insure        insure_up=t.insure_up        income_total=t.income_total        up_total=t.up_total        active_time=t.active_time        delivery=t.delivery        flag=t.flag        level=t.level        main_club_id=t.main_club_id        reg_month=t.reg_month        developer_id=t.developer_id        #t.update(inactive_time=now())        new_income_water=int(abs(score)*0.025*(income_rate/100))        new_income_insure=int(insure*(insure_rate/100)*-0.975)        new_waterup=int(abs(score)*0.025*(1-income_rate/100))        new_insure_up=int(insure*(1-insure_rate/100)*-0.975)        new_income_total=new_income_water+new_income_insure        new_up_total=new_waterup+new_insure_up        new_delivery=score_final+new_income_total        t.is_modify=1        t.save()        try:            new_developer_id = ucs_club_developer.objects.filter(inactive_time='2037-01-01').filter(club_id=new_club_id).get(                user_id=user_id).developer_id        except:            new_developer_id = None        t=ucs_result_table_l1(user_id=user_id,                              account_id=account_id,                              user_name=user_name,                              club_id=old_club_id,                              club_name=club_name,                              score=-score,                              score_final=-score_final,                              income_water=-income_water,                              waterup=-waterup,                              insure=-insure,                              income_insure=-income_insure,                              insure_up=-insure_up,                              income_total=-income_total,                              up_total=-up_total,                              delivery=-delivery,                              game_no=game_no,                              operator_id=operator_id,                              flag=flag,                              level=level,                              active_time=active_time,                              main_club_id=main_club_id,                              reg_month=reg_month,                              developer_id=developer_id,                              is_modify=2                              )        t.save()        if not ucs_club_user.objects.filter(inactive_time='2037-01-01').filter(club_id=new_club_id).filter(                user_id=user_id).exists():            user_old_reg(user_name, new_club_id, user_name,0,0)        new_account_id = ucs_account.objects.filter(inactive_time='2037-01-01').filter(club_id=new_club_id).get(            user_id=user_id).account_id        t=ucs_result_table_l1(user_id=user_id,                              account_id=new_account_id,                              user_name=user_name,                              club_id=new_club_id,                              club_name=new_club_name,                              score=score,                              score_final=score_final,                              income_water=new_income_water,                              waterup=new_waterup,                              insure=insure,                              income_insure=new_income_insure,                              insure_up=new_insure_up,                              income_total=new_income_total,                              up_total=new_up_total,                              delivery=new_delivery,                              game_no=game_no,                              operator_id=operator_id,                              flag=flag,                              level=level,                              active_time=active_time,                              main_club_id=main_club_id,                              reg_month=reg_month,                              developer_id=new_developer_id,                              )        t.save()        #取返水后实际玩家变动金额        #real_final=ucs_result_table_l2.objects.filter(inactive_time='2037-01-01').filter(game_no=game_no).filter(is_modify=0).get(user_id=user_id).score_final        #feedback_info=ucs_club_user.objects.filter(inactive_time='2037-01-01').filter(club_id=club_id).get(user_id=user_id)        #if feedback_info.feedback_type==0:        #    new_real_final=abs(score)*feedback_info.feedback/100000+score        #else:        #    if score>0:        #        new_real_final=score*feedback_info.feedback/100000+score        #serialno = createSerialNo(club_id, group_id, 1009)        note = "牌局" + game_no + user_name + "冲正"        main_club_id=ucs_subs_club.objects.filter(inactive_time='2037-01-01').get(club_lever=0).club_id        #if developer_id is not None:        #    correctResultByDeveloper(game_no,user_id,old_club_id,new_club_id,developer_id,new_developer_id,operator_id,group_id)        #else:        #    if userCashReg(account_id, user_id, old_club_id, 1009, operator_id, -real_final, note, serialno):        #        serialno = createSerialNo(club_id, group_id, 1003)        #        userCashReg(new_account_id, user_id, new_club_id, 1003, operator_id, new_real_final, note, serialno)        #冲正二级账单        if correctResultByDeveloper(game_no, user_id, old_club_id, new_club_id, developer_id, new_developer_id,                                 operator_id, group_id):            if int(old_club_id) != main_club_id:                serialno = createSerialNo(club_id, group_id, 1009)                club_cash_func(operator_id, group_id, old_club_id, -delivery, 1009, serialno, note, club_id)                club_cash_func(operator_id, group_id, new_club_id, delivery, 1009, serialno, note, old_club_id)            serialno = createSerialNo(club_id, group_id, 1003)            if int(new_club_id) != main_club_id:                #写上级余额表                club_cash_func(operator_id, group_id, new_club_id, new_delivery, 1003, serialno, note, club_id)            #写下级余额表                club_cash_func(operator_id, group_id, old_club_id, -new_delivery, 1003, serialno, note, new_club_id)        else:            return False    except Exception as e:        return False    return Truedef correctResultByUnionAll(game_no,operator_id,club_id,group_id):    try:        tb_list=ucs_result_table_l2.objects.filter(inactive_time='2037-01-01').filter(game_no=game_no).filter(flag=0).filter(is_modify=0)\                    .values('user_id','account_id','score_final','main_club_id','user_name')    except:        return False    serialno = createSerialNo(club_id, group_id, 1009)    for t in tb_list:        user_id=t['user_id']        account_id=t['account_id']        score_final=t['score_final']        subs_club_id=t['main_club_id']        user_name=t['user_name']        note = "牌局" + game_no + user_name + "冲正"        #冲正玩家余额        userCashReg(account_id, user_id, subs_club_id, 1009, operator_id, -score_final, note, serialno)    note="牌局" + game_no + "冲正"    try:        tb_developer=ucs_result_table_l2.objects.filter(inactive_time='2037-01-01').filter(game_no=game_no).filter(flag=0)\            .filter(is_modify=0).filter(club_id = None).values('developer_id','main_club_id').distinct()        for t in tb_developer:            developer_id=t['developer_id']            main_club_id=t['main_club_id']            correctResultByDeveloperBalance(main_club_id,developer_id,game_no,serialno,note,operator_id)    except Exception as e:        return False    #失效二级表对应记录    ucs_result_table_l2.objects.filter(inactive_time='2037-01-01').filter(game_no=game_no).update(inactive_time=now())    main_club_id = ucs_subs_club.objects.filter(inactive_time='2037-01-01').get(club_lever=0).club_id    subs_club_id_list=ucs_result_table_l1.objects.filter(inactive_time='2037-01-01').filter(game_no=game_no)\                .filter(is_modify=0).filter(flag=0).values('club_id').distinct()    for t in subs_club_id_list:        subs_club_id=t['club_id']        if subs_club_id != main_club_id:            try:#冲正交接款                tmp=ucs_result_table_l1.objects.filter(inactive_time='2037-01-01').filter(game_no=game_no).filter(is_modify=0)\                            .filter(club_id=subs_club_id).aggregate(sum_delivery=Sum('delivery'))                delivery=-tmp['sum_delivery']                #写上级俱乐部余额                club_cash_func(operator_id, group_id, subs_club_id, delivery, 1009, serialno, note, main_club_id)                #写下级俱乐部余额                club_cash_func(operator_id,group_id,main_club_id,-delivery,1009,serialno,note,subs_club_id)            except Exception as e:                return False    # 失效一级表对应记录    ucs_result_table_l1.objects.filter(inactive_time='2037-01-01').filter(game_no=game_no).update(inactive_time=now())    return Truedef correctResultByDeveloper(game_no,user_id,old_club_id,new_club_id,old_developer_id,new_developer_id,operator_id,group_id):    #冲正托管俱乐部原战绩--完善成冲正二级账单    try:        t=ucs_result_table_l2.objects.filter(inactive_time='2037-01-01').filter(game_no=game_no).filter(is_modify=0)\            .filter(main_club_id=old_club_id).get(user_id=user_id)        account_id=t.account_id        user_name=t.user_name        club_id=t.club_id        club_name=t.club_name        score=t.score        score_final=t.score_final        income_water=t.income_water        waterup=t.waterup        insure=t.insure        income_insure=t.income_insure        insure_up=t.insure_up        up_total=t.up_total        income_total=t.income_total        delivery=t.delivery        game_no=t.game_no        feedback=t.feedback        flag=t.flag        level=t.level        active_time=t.active_time        main_club_id=t.main_club_id        reg_month=t.reg_month        t.is_modify=1        t.save()        t=ucs_result_table_l2(user_id=user_id,                              account_id=account_id,                              user_name=user_name,                              club_id=club_id,                              club_name=club_name,                              score=-score,                              score_final=-score_final,                              income_water=-income_water,                              waterup=-waterup,                              insure=-insure,                              income_insure=-income_insure,                              insure_up=-insure_up,                              feedback=-feedback,                              income_total=-income_total,                              up_total=-up_total,                              delivery=-delivery,                              operator_id=operator_id,                              developer_id=old_developer_id,                              game_no=game_no,                              flag=flag,                              level=level,                              active_time=active_time,                              main_club_id=main_club_id,                              reg_month=reg_month,                              is_modify=2)        t.save()    except Exception as e:        return False    #冲正旧托管账户    note = "牌局" + game_no + user_name + "冲正"    serial_no=createSerialNo(club_id,group_id,1009)    if old_developer_id is not None:        developer_cash(old_developer_id, old_club_id, -income_total, 1009, operator_id, note, serial_no, None)    userCashReg(account_id, user_id, old_club_id, 1009, operator_id, -score_final, note, serial_no)    # 取返水后实际玩家变动金额    feedback_info = ucs_club_user.objects.filter(inactive_time='2037-01-01').filter(club_id=new_club_id).get(        user_id=user_id)    if feedback_info.feedback_type == 0:        new_feedback = abs(score) * feedback_info.feedback / 100000    else:        if score > 0:            new_feedback = score * feedback_info.feedback / 100000        else:            new_feedback = 0    if score>0:        new_real_final=score*0.95+new_feedback    else:        new_real_final=float(score)+new_feedback    #写入新战绩    try:        new_club_info=ucs_subs_club.objects.filter(inactive_time='2037-01-01').get(club_id=new_club_id)        new_club_name=new_club_info.club_name        club_id=new_club_id        new_club_income_rate=new_club_info.income_rate        new_club_insure_rate=new_club_info.insure_rate        if new_developer_id is not None:            new_develoer_info = ucs_developer.objects.filter(inactive_time='2037-01-01').filter(club_id=new_club_id) \                .get(developer_id=new_developer_id)            income_rate=new_develoer_info.income_rate            insure_rate=new_develoer_info.insure_rate            income_water=abs(score)*float(income_rate/100)*0.025-abs(score) * feedback_info.feedback / 100000            income_insure=insure*float(insure_rate/100)*-0.975            waterup=abs(score)*float((new_club_income_rate-income_rate)/100)*0.025            insure_up=insure*float((new_club_insure_rate-insure_rate)/100)*-0.975            up_total=waterup+insure_up            income_total=income_water+income_insure            delivery=score_final+income_total            club_id=None            new_club_name=""        else:            income_water=abs(score)*float(new_club_income_rate/100)*0.025-abs(score) * feedback_info.feedback / 100000            income_insure=insure*float(new_club_insure_rate/100)*-0.975            waterup=abs(score)*float((100-new_club_income_rate)/100)*0.025            insure_up=insure*float((100-new_club_insure_rate)/100)*-0.975            up_total=waterup+insure_up            income_total=income_water+income_insure        t=ucs_result_table_l2(user_id=user_id,                              account_id=account_id,                              user_name=user_name,                              club_id=club_id,                              club_name=new_club_name,                              score=score,                              score_final=int(new_real_final),                              income_water=income_water,                              waterup=waterup,                              insure=insure,                              income_insure=income_insure,                              insure_up=insure_up,                              feedback=int(new_feedback),                              income_total=income_total,                              up_total=up_total,                              delivery=delivery,                              operator_id=operator_id,                              developer_id=new_developer_id,                              game_no=game_no,                              flag=flag,                              level=level,                              active_time=active_time,                              main_club_id=new_club_id,                              reg_month=reg_month,                              is_modify=0)        t.save()    except Exception as e:        return False    serial_no=createSerialNo(club_id,group_id,1003)    if new_developer_id is not None:        developer_cash(new_developer_id,new_club_id,income_total,1003,operator_id,game_no,serial_no,user_id)    userCashReg(account_id, user_id, new_club_id, 1003, operator_id, new_real_final, game_no, serial_no)    return True#冲正托管俱乐部余额，不含玩家def correctResultByDeveloperBalance(club_id,developer_id,game_no,serial_no,note,operator_id):    try:        t=ucs_result_table_l2.objects.filter(inactive_time='2037-01-01').filter(game_no=game_no).filter(developer_id=developer_id)\            .filter(club_id = None).filter(main_club_id=club_id).aggregate(sum_income_total=Sum('income_total'))        sum_income_total=int(t['sum_income_total'])*-1        developer_cash(developer_id,club_id,sum_income_total,1009,operator_id,note,serial_no,None)        return True    except Exception as e:        return Falsedef getRegisitedResultListByL2(game_no,club_id):    with connection.cursor() as cursor:        strSQL="select z.id,z.is_modify,z.club_id,z.developer_id,z.user_name,ifnull(club_name,developer_name), "\               "z.score,z.insure,z.income_water,z.income_insure,z.waterup,z.insure_up "\               "from(select x.*,y.club_name from( "\               "select a.id,a.is_modify,a.user_name,round(a.score/1000,0) score, "\               "round(a.insure/1000,0) insure, "\               "round(a.income_water/1000,2) income_water, "\               "round(a.income_insure/1000,2) income_insure, "\               "round(a.waterup/1000,2) waterup, "\               "round(a.insure_up/1000,2) insure_up, "\               "a.club_id,a.developer_id "\               "from sdt_ucs_result_table_l2 a "\               "where a.game_no=%s "\               "and date_format(a.inactive_time,'%%Y')='2037' "\               "and a.flag=0 "\               "and a.main_club_id=%s "\               "and a.is_modify in (0,1)) x left join "\               "(select a.club_id,a.club_name from sdt_ucs_subs_club a where date_format(a.inactive_time,'%%Y')='2037') y "\               "on x.club_id=y.club_id) z left join "\               "(select a.developer_id,a.developer_name from sdt_ucs_developer a where date_format(a.inactive_time,'%%Y')='2037' and a.club_id=%s) w "\               "on z.developer_id=w.developer_id "        tmp_parm=[game_no,club_id,club_id]        cursor.execute(strSQL,tmp_parm)        tb_result=cursor.fetchall()    return tb_result#修改二级账单def correctResultL2(id,main_club_id,old_club_id,old_developer_id,new_developer_id,operator_id,group_id):    try:        t=ucs_result_table_l2.objects.get(id=id)    except:        return False    user_id=t.user_id    account_id = t.account_id    user_name = t.user_name    club_id = t.club_id    club_name = t.club_name    score = t.score    score_final = t.score_final    income_water = t.income_water    waterup = t.waterup    insure = t.insure    income_insure = t.income_insure    insure_up = t.insure_up    feedback=t.feedback    up_total = t.up_total    income_total = t.income_total    delivery = t.delivery    game_no = t.game_no    flag = t.flag    level = t.level    active_time = t.active_time    main_club_id = t.main_club_id    reg_month = t.reg_month    t.is_modify = 1    t.save()    try:        t=ucs_result_table_l2(user_id=user_id,                              account_id=account_id,                              user_name=user_name,                              club_id=club_id,                              club_name=club_name,                              score=-score,                              score_final=-score_final,                              income_water=-income_water,                              waterup=-waterup,                              insure=-insure,                              income_insure=-income_insure,                              insure_up=-insure_up,                              income_total=-income_total,                              feedback=-feedback,                              up_total=-up_total,                              delivery=-delivery,                              operator_id=operator_id,                              developer_id=old_developer_id,                              game_no=game_no,                              flag=flag,                              level=level,                              active_time=active_time,                              main_club_id=main_club_id,                              reg_month=reg_month,                              is_modify=2)        t.save()    except:        return False    if club_id != main_club_id:        note = "牌局" + game_no + user_name + "冲正"        serial_no=createSerialNo(club_id,group_id,1009)        developer_cash(old_developer_id, main_club_id, -income_total, 1009, operator_id, note, serial_no, None)    try:        new_developer_info=ucs_developer.objects.filter(inactive_time='2037-01-01').filter(club_id=main_club_id).get(developer_id=new_developer_id)        main_club_info=ucs_subs_club.objects.filter(inactive_time='2037-01-01').get(club_id=main_club_id)    except:        return False    new_income_rate=new_developer_info.income_rate    new_insure_rate=new_developer_info.insure_rate    main_income_rate=main_club_info.income_rate    main_insure_rate=main_club_info.insure_rate    income_water = abs(score) * float(new_income_rate / 100) * 0.025 - feedback    income_insure = insure * float(new_insure_rate / 100) * -0.975    waterup = abs(score) * float((main_income_rate - new_income_rate) / 100) * 0.025    insure_up = insure * float((main_insure_rate - new_insure_rate) / 100) * -0.975    up_total = waterup + insure_up    income_total = income_water + income_insure    delivery=score_final+income_total    t = ucs_result_table_l2(user_id=user_id,                            account_id=account_id,                            user_name=user_name,                            club_id=None,                            club_name="",                            score=score,                            score_final=score_final,                            income_water=income_water,                            waterup=waterup,                            insure=insure,                            income_insure=income_insure,                            insure_up=insure_up,                            feedback=feedback,                            income_total=income_total,                            up_total=up_total,                            delivery=delivery,                            operator_id=operator_id,                            developer_id=new_developer_id,                            game_no=game_no,                            flag=flag,                            level=level,                            active_time=active_time,                            main_club_id=main_club_id,                            reg_month=reg_month,                            is_modify=0)    t.save()    serial_no = createSerialNo(club_id, group_id, 1003)    developer_cash(new_developer_id, main_club_id, income_total, 1003, operator_id, game_no, serial_no, user_id)    if not UserDeveloperReg(new_developer_id,user_id,main_club_id):        developerUserUnband(main_club_id,old_developer_id,user_id)        UserDeveloperReg(new_developer_id, user_id, main_club_id)    return Truedef getMenuTreeByGroupId(group_id):    with connection.cursor() as cursor:        strSQL="select a.group_id,b.tree_id,b.title,b.url,a.tree_l2_id,c.title,c.url from sdt_permission_menu a, "\               "sdt_menu_tree_l1 b, "\               "sdt_menu_tree_l2 c "\               "where c.parent_id=b.tree_id "\               "and a.tree_l2_id=c.tree_id "\               "and date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and date_format(c.inactive_time,'%%Y')='2037' "\               "and a.group_id=%s "\               "order by b.tree_id asc, a.tree_l2_id asc "        cursor.execute(strSQL, group_id)        tb_result=cursor.fetchall()    return tb_resultdef getMenuTreeByAll():    with connection.cursor() as cursor:        strSQL="select b.tree_id,b.title,c.tree_id,b.url,c.title,c.url from "\               "sdt_menu_tree_l1 b, "\               "sdt_menu_tree_l2 c "\               "where c.parent_id=b.tree_id "\               "and date_format(b.inactive_time,'%Y')='2037' "\               "and date_format(c.inactive_time,'%Y')='2037' "\               "order by b.tree_id asc "        cursor.execute(strSQL)        tb_result=cursor.fetchall()    return tb_resultdef getMenuTreeL2IdByGroupId(group_id):    with connection.cursor() as cursor:        strSQL="select a.tree_l2_id from sdt_permission_menu a "\               "where  date_format(a.inactive_time,'%%Y')='2037' "\               "and group_id=%s "        cursor.execute(strSQL,group_id)        tb_result = cursor.fetchall()    return tb_resultdef user_exist_account(user_id,new_user_name,club_id,remark,operator_id,feedback,feedbacktype):    if remark=="":        remark=new_user_name    try:        t_real_user = real_user(user_name=new_user_name)        t_real_user.save()  # 生成了USERID        tmp = real_user.objects.filter(user_name=new_user_name)        new_user_id = tmp.order_by('-active_time')[0].user_id        account_id=ucs_account.objects.filter(inactive_time='2037-01-01').filter(club_id=club_id)\            .get(user_id=user_id).account_id        new_user=ucs_account(account_id=account_id,                             user_id=new_user_id,                             club_id=club_id,                             account_level=2)        new_user.save()        new_club_user=ucs_club_user(club_id=club_id,                                    user_id=new_user_id,                                    feedback=feedback,                                    feedback_type=feedbacktype,                                    remark=remark)        new_club_user.save()        new_subs_user=ucs_subs_user(user_id=new_user_id,                                    user_name=new_user_name,                                    wx_name=new_user_name,                                    operator_id=operator_id,                                    note="")        new_subs_user.save()        return True    except Exception as e:        return Falsedef getUpClubAccountId(club_id):    with connection.cursor() as cursor:        strSQL="select a.account_id from sdt_ucs_union_account a, "\               "sdt_ucs_club_relation b "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and a.club_id=b.club_id "\               "and b.subs_club_id=%s "        cursor.execute(strSQL, club_id)        tb_result = cursor.fetchall()    return tb_resultdef getInitUserBalanceList(club_id):    with connection.cursor() as cursor:        strSQL="select r.user_id,r.user_name,round(ba.balance/1000,2) balance,ba.updatetime from sdt_ucs_subs_user r, "\               "(select  x.user_id,x.account_id,x.balance,x.updatetime from (select a.user_id,a.account_id," \               "a.updatetime,a.balance from sdt_ucs_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s) x, "\               "(select a.account_id,a.updatetime from (select a.account_id,a.updatetime from sdt_ucs_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s) a "\               "left join (select a.account_id,a.updatetime from sdt_ucs_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s) b "\               "on a.account_id=b.account_id and a.updatetime<=b.updatetime "\               "group by a.account_id,a.updatetime "\               "having count(b.account_id)=1) y "\               "where x.account_id=y.account_id "\               "and x.updatetime=y.updatetime "\               "order by x.account_id,x.updatetime desc) ba "\               "where date_format(r.inactive_time,'%%Y')='2037' "\               "and r.user_id=ba.user_id"        tmp_parm=[club_id,club_id,club_id]        cursor.execute(strSQL,tmp_parm)        tb_result=cursor.fetchall()    return tb_resultdef initUserBalance(account_id,user_id,club_id,balance,operator_id):    try:        if ucs_balance.objects.filter(inactive_time='2037-01-01').filter(club_id=club_id).filter(account_id=account_id).exists():            ucs_balance.objects.filter(inactive_time='2037-01-01').filter(club_id=club_id)\                .filter(account_id=account_id).update(inactive_time=now())        t=ucs_balance(account_id=account_id,                        user_id=user_id,                        club_id=club_id,                        balance=balance,                        chance=balance,                        type_id=9999,                        chance_desc='初始化',                        serial_no="",                        operator_id=operator_id,                        note='初始化')        t.save()        return True    except:        return Falsedef initUnionBalance(account_id,balance,operator_id,group_id,main_club_id):    try:        if ucs_union_balance.objects.filter(inactive_time='2037-01-01').filter(main_club_id=main_club_id)\                .filter(account_id=account_id).exists():            ucs_union_balance.objects.filter(inactive_time='2037-01-01').filter(main_club_id=main_club_id) \                .filter(account_id=account_id).update(inactive_time=now())        t=ucs_union_balance(serial_no="",                            account_id=account_id,                            balance=balance,                            chance=balance,                            chance_type=9999,                            chance_desc='初始化',                            operator_id=operator_id,                            group_id=group_id,                            note='初始化',                            main_club_id=main_club_id)        t.save()        return True    except:        return Falsedef getOperatorAccountListByClubId(club_id):    with connection.cursor() as cursor:        strSQL="select b.account_id,a.group_id,CONCAT(a.group_name,b.account_desc) name from sdt_ucs_operator_group a, "\               "sdt_ucs_club_account b, "\               "sdt_pm_account_type c "\               "where a.club_id=b.club_id "\               "and a.group_id=b.group_id "\               "and b.type_id=c.type_id "\               "and DATE_FORMAT(a.inactive_time,'%%Y')='2037' "\               "and DATE_FORMAT(b.inactive_time,'%%Y')='2037' "\               "and DATE_FORMAT(c.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s "        cursor.execute(strSQL,club_id)        tb_result=cursor.fetchall()    return tb_resultdef initOperatorBalance(account_id,balance,operator_id,group_id):    try:        if ucs_club_balance.objects.filter(inactive_time='2037-01-01').filter(account_id=account_id).exists():            ucs_club_balance.objects.filter(inactive_time='2037-01-01').filter(account_id=account_id).update(inactive_time=now())        t=ucs_club_balance(serial_no="",                           account_id=account_id,                           balance=balance,                           chance=balance,                           chance_type=9999,                           chance_desc='初始化',                           operator_id=operator_id,                           group_id=group_id,                           note='初始化')        t.save()        return True    except:        return Falsedef getInitOperaterBalanceSum(club_id):    with connection.cursor() as cursor:        strSQL="select ifnull(sum(a.balance),0) balance from sdt_ucs_club_balance a, "\               "sdt_ucs_club_account b "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(b.inactive_time,'%%Y')='2037' "\               "and b.club_id=%s "\               "and a.account_id=b.account_id "        cursor.execute(strSQL, club_id)        tb_result = cursor.fetchall()    result=tb_result[0][0]    return resultdef getInitDeveloperBalanceSum(club_id):    with connection.cursor() as cursor:        strSQL="select ifnull(sum(a.balance),0) balance "\               "from sdt_ucs_developer_balance a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.club_id=%s "        cursor.execute(strSQL, club_id)        tb_result = cursor.fetchall()    result=tb_result[0][0]    return resultdef initDeveloperCash(developer_id,club_id,balance,operator_id):    try:        if ucs_developer_balance.objects.filter(inactive_time='2037-01-01').filter(developer_id=developer_id).exists():            ucs_developer_balance.objects.filter(inactive_time='2037-01-01').filter(developer_id=developer_id).update(inactive_time=now())        t=ucs_developer_balance(serial_no='',                                developer_id=developer_id,                                club_id=club_id,                                chance=balance,                                balance=balance,                                type_id=9999,                                operator_id=operator_id,                                note='初始化')        t.save()        return True    except:        return Falsedef getInitIncomeTotal(club_id):    with connection.cursor() as cursor:        strSQL="select ifnull(round(sum(a.income_water/1000),2),0), "\               "ifnull(round(sum(a.income_insure)/1000,2),0), "\               "ifnull(round(sum(a.income_total)/1000,2),0) "\               "from sdt_ucs_result_table_l1 a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.main_club_id=%s "\               "and a.flag=0 "        cursor.execute(strSQL, club_id)        tb_result = cursor.fetchall()    return tb_resultdef initClubIncomeCash(club_id,club_name,water,insure):    try:        if ucs_result_table_l1.objects.filter(inactive_time='2037-01-01').filter(main_club_id=club_id).exists():            ucs_result_table_l1.objects.filter(inactive_time='2037-01-01').filter(main_club_id=club_id).update(inactive_time=now())        t=ucs_result_table_l1(user_id=9999,                              account_id=9999,                              user_name='',                              club_id=club_id,                              club_name=club_name,                              score=0,                              score_final=0,                              income_water=water,                              waterup=0,                              insure=0,                              income_insure=insure,                              insure_up=0,                              income_total=water+insure,                              up_total=0,                              delivery=0,                              game_no=9999,                              flag=0,                              level=0,                              main_club_id=1000,                              reg_month='',                              is_modify=0)        t.save()        return True    except Exception as e:        return Falsedef qr_code_test():    qr=qrcode.QRCode(        version=3,        box_size=5,        border=4    )    qr.add_data('http://47.100.126.119/test/')    qr.make(fit=True)    img=qr.make_image()    img.save('sdt/static/img/test.png')    return Truedef reward_img_reg(game_no,club_id,file_name,operator_id,blind_id,type_id,reward):    try:        t=ucs_game_reward_record(game_no=game_no,                                 file_url=file_name,                                 club_id=club_id,                                 blind_id=blind_id,                                 type_id=type_id,                                 reward=reward,                                 operator_id=operator_id)        t.save()        return True    except Exception as e:        return Falsedef getRewardListPre(club_id):    with connection.cursor() as cursor:        strSQL="select a.game_no,b.blind_desc,c.type_name,round(a.reward/1000,2) reward, "\               "d.operator_name,a.active_time,a.file_url from sdt_ucs_game_reward_record a, "\               "sdt_pm_blind b, "\               "sdt_pm_reward c, "\               "sdt_ucs_operator d "\               "where a.blind_id=b.blind_id "\               "and date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(c.inactive_time,'%%Y')='2037' "\               "and date_format(d.inactive_time,'%%Y')='2037' "\               "and a.blind_id=b.blind_id "\               "and a.type_id=c.type_id "\               "and a.operator_id=d.operator_id "\               "and a.club_id=%s "\               "order by a.active_time desc "\               "limit 20 "        cursor.execute(strSQL,club_id)        tb_result=cursor.fetchall()    return tb_resultdef getRewardListByDate(club_id,start,end):    with connection.cursor() as cursor:        strSQL="select a.game_no,b.blind_desc,c.type_name,round(a.reward/1000,2) reward, "\               "d.operator_name,a.active_time,a.file_url from sdt_ucs_game_reward_record a, "\               "sdt_pm_blind b, "\               "sdt_pm_reward c, "\               "sdt_ucs_operator d "\               "where a.blind_id=b.blind_id "\               "and date_format(a.inactive_time,'%%Y')='2037' "\               "and date_format(c.inactive_time,'%%Y')='2037' "\               "and date_format(d.inactive_time,'%%Y')='2037' "\               "and a.blind_id=b.blind_id "\               "and a.type_id=c.type_id "\               "and a.operator_id=d.operator_id "\               "and a.club_id=%s " \               "and date_format(a.active_time,'%%Y-%%m-%%d') between %s and %s "\               "order by a.active_time desc "\               "limit 20 "        tmp_parm=[club_id,start,end]        cursor.execute(strSQL,tmp_parm)        tb_result=cursor.fetchall()    return tb_resultdef modifyGroupMenu(tree_l2_list,group_id,tree_l2_list_del):    with connection.cursor() as cursor:        strSQL="insert into sdt_permission_menu (group_id,tree_l1_id,tree_l2_id,inactive_time) "\               "(select %s,x.parent_id,x.tree_id,'2037-01-01' from ( "\               "select a.tree_id,a.parent_id from sdt_menu_tree_l2 a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.tree_id in %s) x "\               "where x.tree_id not in( " \               "select a.tree_l2_id from sdt_permission_menu a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.group_id=%s)) "        tmp_parm=[group_id,tree_l2_list,group_id]        cnt=cursor.execute(strSQL,tmp_parm)        strSQL="update sdt_permission_menu inner join ( "\               "select x.parm from ( "\               "select concat(%s,a.parent_id,a.tree_id) parm from sdt_menu_tree_l2 a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.tree_id in %s "\               "and a.tree_id  in( "\               "select a.tree_l2_id from sdt_permission_menu a "\               "where date_format(a.inactive_time,'%%Y')='2037' "\               "and a.group_id=%s)) x "\               ") b on concat(group_id,tree_l1_id,tree_l2_id) = b.parm "\               "set inactive_time=%s "        tmp_parm=[group_id,tree_l2_list_del,group_id,now()]        cnt2=cursor.execute(strSQL,tmp_parm)        cnt=cnt+cnt2    return cntdef getUnionMultiUserList():    with connection.cursor() as cursor:        strSQL="select x.user_id,b.club_id,c.user_name,b.club_name from ( "\               "select a.user_id from sdt_ucs_club_user a "\               "where date_format(a.inactive_time,'%Y')='2037' "\               "group by a.user_id "\               "having count(*)>1) x, "\               "sdt_ucs_subs_club b, "\               "sdt_ucs_subs_user c, "\               "sdt_ucs_club_user d "\               "where d.club_id=b.club_id "\               "and date_format(b.inactive_time,'%Y')='2037' "\               "and date_format(c.inactive_time,'%Y')='2037' "\               "and date_format(d.inactive_time,'%Y')='2037' "\               "and x.user_id=c.user_id "\               "and x.user_id=d.user_id "        cursor.execute(strSQL)        tb_result=cursor.fetchall()    return tb_resultdef disableUnionMutiUser(club_id,user_id):    try:        ucs_club_user.objects.filter(inactive_time='2037-01-01').filter(club_id=club_id).filter(user_id=user_id)\            .update(inactive_time=now())    except:        return False    try:        ucs_account.objects.filter(inactive_time='2037-01-01').filter(user_id=user_id).filter(club_id=club_id).update(inactive_time=now())        return True    except:        return Falsedef getUnionUserAll():    with connection.cursor() as cursor:        strSQL="select d.user_id,b.club_id,c.user_name,b.club_name,d.active_time from "\               "sdt_ucs_subs_club b, "\               "sdt_ucs_subs_user c, "\               "sdt_ucs_club_user d "\               "where d.club_id=b.club_id "\               "and date_format(b.inactive_time,'%Y')='2037' "\               "and date_format(c.inactive_time,'%Y')='2037' "\               "and date_format(d.inactive_time,'%Y')='2037' "\               "and d.user_id=c.user_id "\               "order by d.active_time desc "        cursor.execute(strSQL)        tb_result=cursor.fetchall()    return tb_resultdef userRewardReg(club_id,user_id,reward,serial_no,operator_id,game_no):    try:        account_id=ucs_account.objects.filter(inactive_time='2037-01-01').filter(club_id=club_id).get(user_id=user_id).account_id    except:        return False    try:        balance=ucs_balance.objects.filter(inactive_time='2037-01-01').filter(account_id=account_id).order_by('-id')[0].balance    except:        balance=0    balance=balance+reward    try:        t=ucs_balance(account_id=account_id,                              user_id=user_id,                              club_id=club_id,                              balance=balance,                              chance=reward,                              chance_desc='牌局奖励',                              serial_no=serial_no,                              operator_id=operator_id,                              note=game_no+'牌局奖励',                              type_id=1001)        t.save()        return True    except:        return Falsedef disableUserFromClub(user_id,club_id):    try:        t=ucs_club_user.objects.filter(inactive_time='2037-01-01').filter(club_id=club_id).get(user_id=user_id)        t.inactive_time=now()        t.save()        t=ucs_account.objects.filter(inactive_time='2037-01-01').filter(club_id=club_id).get(user_id=user_id)        account_id=t.account_id        t.inactive_time=now()        t.save()        if ucs_account.objects.filter(inactive_time='2037-01-01').filter(club_id=club_id).filter(account_id=account_id).exists():            tmp=ucs_account.objects.filter(inactive_time='2037-01-01').filter(club_id=club_id)\                .filter(account_id=account_id).order_by('active_time')[0]            tmp.account_level=1            tmp.save()        return True    except:        return Falsedef checkExistUserBalance(user_id,club_id):    try:        account_info=ucs_account.objects.filter(club_id=club_id).filter(inactive_time='2037-01-01').filter(user_id=user_id)        account_id = account_info.get(user_id=user_id).account_id        cnt=ucs_account.objects.filter(inactive_time='2037-01-01').filter(account_id=account_id).count()        if cnt==1:            try:                balance=ucs_balance.objects.filter(inactive_time='2037-01-01').filter(club_id=club_id).filter(account_id=account_id).order_by('-id')[0].balance            except:                balance=0            if balance==0:                return True            else:                return False        else:            return True    except:        return Falsedef addOperatorLog(operator_id,op_type_id,op_desc):    try:        t=operator_log(operator_id=operator_id,                       op_type_id=op_type_id,                       op_desc=op_desc)        t.save()        return True    except:        return False